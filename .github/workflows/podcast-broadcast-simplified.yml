name: Daily Podcast Broadcast

on:
  schedule:
    - cron: '30 22 * * *' # JST 7:30 (UTC 22:30) - ÈÄöÂã§ÊôÇÈñìÂ∏Ø
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇíÂèØËÉΩ„Å´„Åô„Çã
    inputs:
      execution_mode:
        description: 'ÂÆüË°å„É¢„Éº„Éâ'
        required: false
        default: 'production'
        type: choice
        options:
        - 'production'      # ÈÄöÂ∏∏„ÅÆÊú¨Áï™ÂÆüË°åÔºàÈü≥Â£∞ÁîüÊàêÔºãÈÖç‰ø°Ôºâ
        - 'script-only'     # Âè∞Êú¨ÁîüÊàê„ÅÆ„ÅøÔºàÈü≥Â£∞ÁîüÊàê„Å™„ÅóÔºâ
        - 'test'           # „ÉÜ„Çπ„Éà„É¢„Éº„ÉâÔºàÈÖç‰ø°„Å™„ÅóÔºâ
      data_source:
        description: '„Éá„Éº„Çø„ÇΩ„Éº„Çπ'
        required: false
        default: 'auto'
        type: choice
        options:
        - 'auto'           # Ëá™ÂãïÈÅ∏ÊäûÔºàDBÂÑ™ÂÖà„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÅßGoogle DocÔºâ
        - 'database'       # „Éá„Éº„Çø„Éô„Éº„ÇπÂº∑Âà∂‰ΩøÁî®
        - 'google_doc'     # Google DocumentÂº∑Âà∂‰ΩøÁî®
      weekdays_only:
        description: 'Âπ≥Êó•„ÅÆ„ÅøÂÆüË°å'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  podcast-broadcast:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Download database artifact
      id: download-artifact
      if: |
        github.event_name == 'schedule' || 
        github.event_name == 'push' ||
        (github.event_name == 'workflow_dispatch' && 
         (github.event.inputs.data_source == 'auto' || github.event.inputs.data_source == 'database'))
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        workflow: main.yml
        name: market-news-db
        path: .
        search_artifacts: true

    - name: Determine data source
      id: data-source
      run: |
        # ÂÆüË°å„É¢„Éº„ÉâË®≠ÂÆö
        EXECUTION_MODE="${{ github.event.inputs.execution_mode || 'production' }}"
        echo "EXECUTION_MODE=$EXECUTION_MODE" >> $GITHUB_ENV
        
        # „Éá„Éº„Çø„ÇΩ„Éº„ÇπÊ±∫ÂÆö„É≠„Ç∏„ÉÉ„ÇØ
        if [ "${{ github.event.inputs.data_source }}" == "google_doc" ]; then
          echo "PODCAST_DATA_SOURCE=google_document" >> $GITHUB_ENV
          echo "GOOGLE_DOCUMENT_ID=${{ secrets.GOOGLE_DOCUMENT_ID || secrets.GOOGLE_OVERWRITE_DOC_ID }}" >> $GITHUB_ENV
          echo "final_source=google_document" >> $GITHUB_OUTPUT
        elif [ "${{ github.event.inputs.data_source }}" == "database" ] && [ -f "market_news.db" ]; then
          echo "PODCAST_DATA_SOURCE=database" >> $GITHUB_ENV
          echo "final_source=database" >> $GITHUB_OUTPUT
        elif [ -f "market_news.db" ] && sqlite3 market_news.db ".tables" > /dev/null 2>&1; then
          echo "PODCAST_DATA_SOURCE=database" >> $GITHUB_ENV
          echo "final_source=database" >> $GITHUB_OUTPUT
        else
          echo "PODCAST_DATA_SOURCE=google_document" >> $GITHUB_ENV
          echo "GOOGLE_DOCUMENT_ID=${{ secrets.GOOGLE_DOCUMENT_ID || secrets.GOOGLE_OVERWRITE_DOC_ID }}" >> $GITHUB_ENV
          echo "final_source=google_document" >> $GITHUB_OUTPUT
        fi
        
        echo "=== Configuration Summary ==="
        echo "Execution Mode: $EXECUTION_MODE"
        echo "Data Source: ${{ steps.data-source.outputs.final_source || env.PODCAST_DATA_SOURCE }}"
        echo "Weekdays Only: ${{ github.event.inputs.weekdays_only || 'false' }}"

    - name: Run podcast generation
      env:
        # Core Configuration
        PODCAST_FORCE_RUN: 'true'
        PODCAST_WEEKDAYS_ONLY: ${{ github.event.inputs.weekdays_only || 'false' }}
        
        # Google Authentication
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        
        # AI Configuration
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
        # LINE Bot Configuration
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
        
        # Podcast Configuration
        PODCAST_RSS_BASE_URL: ${{ secrets.PODCAST_RSS_BASE_URL }}
        PODCAST_AUTHOR_NAME: ${{ secrets.PODCAST_AUTHOR_NAME }}
        PODCAST_AUTHOR_EMAIL: ${{ secrets.PODCAST_AUTHOR_EMAIL }}
      timeout-minutes: 20
      run: |
        echo "üéôÔ∏è Starting podcast generation..."
        
        # ÂÆüË°å„É¢„Éº„ÉâÂà•„ÅÆÂá¶ÁêÜ
        case "$EXECUTION_MODE" in
          "script-only")
            echo "üìù Script-only mode"
            python scripts/core/standalone_podcast_main.py --script-only
            ;;
          "test")
            echo "üß™ Test mode (no broadcast)"
            python scripts/core/standalone_podcast_main.py --test-mode
            ;;
          "production"|*)
            echo "üöÄ Production mode"
            python scripts/core/standalone_podcast_main.py
            ;;
        esac

    - name: Display results
      if: always()
      run: |
        echo "=== Generation Results ==="
        
        # „Çπ„ÇØ„É™„Éó„Éà„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
        for script_file in output/podcast/*_script.txt; do
          if [ -f "$script_file" ]; then
            echo "‚úÖ Script: $(basename "$script_file") ($(wc -c < "$script_file") chars)"
            if [ "$EXECUTION_MODE" == "script-only" ]; then
              echo "üìÑ Script preview:"
              head -20 "$script_file" | sed 's/^/  /'
            fi
          fi
        done
        
        # Èü≥Â£∞„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
        for audio_file in output/podcast/*.mp3 podcast/*.mp3; do
          if [ -f "$audio_file" ]; then
            file_size=$(du -h "$audio_file" | cut -f1)
            echo "‚úÖ Audio: $(basename "$audio_file") ($file_size)"
          fi
        done

    - name: Prepare and deploy
      if: success() && env.EXECUTION_MODE != 'script-only'
      run: |
        mkdir -p public/podcast
        
        # Èü≥Â£∞„Éï„Ç°„Ç§„É´„Å®RSS„Éï„Ç£„Éº„Éâ„Çí„Ç≥„Éî„Éº
        for audio_file in output/podcast/*.mp3 podcast/*.mp3; do
          if [ -f "$audio_file" ]; then
            cp "$audio_file" public/podcast/
          fi
        done
        
        for rss_file in podcast/podcast.rss podcast/feed.xml; do
          if [ -f "$rss_file" ]; then
            cp "$rss_file" public/podcast/feed.xml
            break
          fi
        done

    - name: Deploy to GitHub Pages
      if: success() && env.EXECUTION_MODE == 'production'
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages
        keep_files: true
        destination_dir: .
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy podcast: ${{ github.run_id }}'

    - name: Workflow summary
      if: always()
      run: |
        echo "## üìä Podcast Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Mode**: $EXECUTION_MODE" >> $GITHUB_STEP_SUMMARY
        echo "- **Data Source**: ${{ steps.data-source.outputs.final_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Weekdays Only**: ${{ github.event.inputs.weekdays_only || 'false' }}" >> $GITHUB_STEP_SUMMARY
        
        # ÁµêÊûú„É¨„Éù„Éº„Éà
        SCRIPT_COUNT=$(find output/podcast -name "*_script.txt" 2>/dev/null | wc -l)
        AUDIO_COUNT=$(find output/podcast podcast -name "*.mp3" 2>/dev/null | wc -l)
        
        echo "- **Scripts Generated**: $SCRIPT_COUNT" >> $GITHUB_STEP_SUMMARY
        echo "- **Audio Files**: $AUDIO_COUNT" >> $GITHUB_STEP_SUMMARY
        
        if [ "$EXECUTION_MODE" == "production" ] && [ $AUDIO_COUNT -gt 0 ]; then
          REPO_OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          echo "- **üéôÔ∏è Podcast URL**: https://${REPO_OWNER}.github.io/${REPO_NAME}/podcast/" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Create Issue on Failure
      if: failure() && github.event.pull_request == null
      uses: jayqi/failed-build-issue-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        title-template: "üéôÔ∏è Podcast Generation Failed #${{ github.run_number }}"
        body-template: |
          **Execution Mode**: ${{ env.EXECUTION_MODE }}
          **Data Source**: ${{ steps.data-source.outputs.final_source }}
          **Run**: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        label-name: "podcast"
        always-create-new-issue: false