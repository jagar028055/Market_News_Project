name: Automated Testing Pipeline

on:
  push:
    branches: [ master, main, develop, feature/*, fix/* ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇíÂèØËÉΩ„Å´„Åô„Çã
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'all'
        type: choice
        options:
        - 'lint'
        - 'unit'
        - 'integration' 
        - 'all'
      coverage_threshold:
        description: 'Minimum coverage percentage'
        required: false
        default: '80'
        type: string

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy

    - name: Run Black formatter check
      run: |
        echo "üé® Running Black formatter check..."
        black --check --diff src/ tests/ || (echo "‚ùå Black formatting issues found" && exit 1)

    - name: Run Flake8 linter
      run: |
        echo "üîç Running Flake8 linter..."
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Run MyPy type checking
      run: |
        echo "üî¨ Running MyPy type checking..."
        mypy src/ || echo "‚ö†Ô∏è MyPy warnings found (continuing)"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    if: always() && (needs.lint.result == 'success' || github.event.inputs.test_level == 'unit' || github.event.inputs.test_level == 'all')
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg mecab mecab-ipadic-utf8 libmecab-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock

    - name: Run unit tests
      env:
        PYTEST_CURRENT_TEST: "true"
      run: |
        echo "üß™ Running unit tests with Python ${{ matrix.python-version }}..."
        python -m pytest tests/unit/ \
          -v \
          --tb=short \
          --cov=src \
          --cov-report=xml:coverage-${{ matrix.python-version }}.xml \
          --cov-report=html:htmlcov-${{ matrix.python-version }} \
          --cov-report=term-missing \
          --junit-xml=junit-${{ matrix.python-version }}.xml \
          -n auto

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          coverage-${{ matrix.python-version }}.xml
          htmlcov-${{ matrix.python-version }}/
          junit-${{ matrix.python-version }}.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: always() && ((needs.lint.result == 'success' && needs.unit-tests.result == 'success') || github.event.inputs.test_level == 'integration' || github.event.inputs.test_level == 'all')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg mecab mecab-ipadic-utf8 libmecab-dev fonts-noto-cjk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-mock

    - name: Run integration tests
      env:
        # „ÉÜ„Çπ„ÉàÁî®„ÅÆÁí∞Â¢ÉÂ§âÊï∞ÔºàÂÆüÈöõ„ÅÆAPI„Ç≠„Éº„ÅØ‰Ωø„Çè„Å™„ÅÑÔºâ
        GEMINI_API_KEY: "test-api-key"
        GOOGLE_AUTH_METHOD: "mock"
        PYTEST_CURRENT_TEST: "true"
        INTEGRATION_TEST_MODE: "true"
      timeout-minutes: 30
      run: |
        echo "üîó Running integration tests..."
        python -m pytest tests/integration/ \
          -v \
          --tb=short \
          --cov=src \
          --cov-append \
          --cov-report=xml:integration-coverage.xml \
          --cov-report=html:integration-htmlcov \
          --junit-xml=integration-junit.xml

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          integration-coverage.xml
          integration-htmlcov/
          integration-junit.xml

  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always() && (needs.unit-tests.result == 'success' || needs.integration-tests.result == 'success')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all coverage reports
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-reports-*
        merge-multiple: true

    - name: Download integration coverage
      uses: actions/download-artifact@v4
      with:
        name: integration-test-results
        path: integration/

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install coverage tools
      run: |
        python -m pip install --upgrade pip
        pip install coverage[toml] pytest-cov

    - name: Combine coverage reports
      run: |
        echo "üìä Combining coverage reports..."
        coverage combine coverage-*.xml || echo "No unit test coverage files found"
        if [ -f "integration/integration-coverage.xml" ]; then
          coverage combine integration/integration-coverage.xml
        fi
        coverage report --show-missing
        coverage html -d combined-coverage
        coverage xml -o combined-coverage.xml

    - name: Check coverage threshold
      run: |
        THRESHOLD=${{ github.event.inputs.coverage_threshold || '80' }}
        echo "üìã Checking coverage threshold: ${THRESHOLD}%"
        COVERAGE=$(coverage report --format=total)
        echo "Current coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
          echo "‚úÖ Coverage threshold met: ${COVERAGE}% >= ${THRESHOLD}%"
        else
          echo "‚ùå Coverage threshold not met: ${COVERAGE}% < ${THRESHOLD}%"
          echo "::error::Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        fi

    - name: Upload combined coverage
      uses: actions/upload-artifact@v4
      with:
        name: combined-coverage-report
        path: |
          combined-coverage/
          combined-coverage.xml

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverage = fs.readFileSync('combined-coverage.xml', 'utf8');
          const coverageMatch = coverage.match(/line-rate="([0-9.]+)"/);
          const coveragePercent = coverageMatch ? Math.round(parseFloat(coverageMatch[1]) * 100) : 'Unknown';
          
          const comment = `## üìä „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„Éà
          
          **„Ç´„Éê„É¨„ÉÉ„Ç∏**: ${coveragePercent}%
          **ÈñæÂÄ§**: ${{ github.event.inputs.coverage_threshold || '80' }}%
          **Áä∂ÊÖã**: ${coveragePercent >= ${{ github.event.inputs.coverage_threshold || '80' }} ? '‚úÖ ÂêàÊ†º' : '‚ùå ‰∏çÂêàÊ†º'}
          
          Ë©≥Á¥∞„Å™„É¨„Éù„Éº„Éà„ÅØ [Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) „Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åß„Åç„Åæ„Åô„ÄÇ`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, coverage-analysis]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "# üß™ „ÉÜ„Çπ„ÉàÂÆüË°å„Çµ„Éû„É™„Éº" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ÂÆüË°åÁµêÊûú" >> $GITHUB_STEP_SUMMARY
        echo "| „Çπ„ÉÜ„Éº„Ç∏ | ÁµêÊûú | Ë©≥Á¥∞ |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lint | ${{ needs.lint.result == 'success' && '‚úÖ ÊàêÂäü' || needs.lint.result == 'failure' && '‚ùå Â§±Êïó' || '‚è≠Ô∏è „Çπ„Ç≠„ÉÉ„Éó' }} | „Ç≥„Éº„ÉâÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '‚úÖ ÊàêÂäü' || needs.unit-tests.result == 'failure' && '‚ùå Â§±Êïó' || '‚è≠Ô∏è „Çπ„Ç≠„ÉÉ„Éó' }} | Âçò‰Ωì„ÉÜ„Çπ„ÉàÔºàPython 3.9-3.11Ôºâ |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '‚úÖ ÊàêÂäü' || needs.integration-tests.result == 'failure' && '‚ùå Â§±Êïó' || '‚è≠Ô∏è „Çπ„Ç≠„ÉÉ„Éó' }} | Áµ±Âêà„ÉÜ„Çπ„Éà |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage Analysis | ${{ needs.coverage-analysis.result == 'success' && '‚úÖ ÊàêÂäü' || needs.coverage-analysis.result == 'failure' && '‚ùå Â§±Êïó' || '‚è≠Ô∏è „Çπ„Ç≠„ÉÉ„Éó' }} | „Ç´„Éê„É¨„ÉÉ„Ç∏ÂàÜÊûê |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" && "${{ needs.coverage-analysis.result }}" == "success" ]]; then
          echo "## üéâ ÂÖ®„ÉÜ„Çπ„ÉàÊàêÂäüÔºÅ" >> $GITHUB_STEP_SUMMARY
          echo "„Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü„ÄÇÊú¨Áï™„Éá„Éó„É≠„Ç§„ÅÆÊ∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÄÇ" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ö†Ô∏è „ÉÜ„Çπ„ÉàÂ§±Êïó„Åå„ÅÇ„Çä„Åæ„Åô" >> $GITHUB_STEP_SUMMARY
          echo "Â§±Êïó„Åó„Åü„ÉÜ„Çπ„Éà„ÇíÁ¢∫Ë™ç„Åó„Å¶‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**ÂÆüË°åÊôÇÂàª**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**„Éñ„É©„É≥„ÉÅ**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**„Éà„É™„Ç¨„Éº**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY