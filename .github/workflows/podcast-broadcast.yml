name: Daily Podcast Broadcast

on:
  push:
    branches:
      - master  # 本番モードテスト用に再有効化
  schedule:
    - cron: '30 22 * * *' # JST 7:30 (UTC 22:30) - 通勤時間帯
  workflow_dispatch: # 手動実行を可能にする
    inputs:
      use_db_artifact:
        description: 'Use database artifact from main workflow'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      force_run:
        description: 'Force run even if conditions are not met'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
      test_mode:
        description: 'Run in test mode (no actual broadcast)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      weekdays_only:
        description: 'Run only on weekdays'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      prompt_pattern:
        description: 'プロンプトパターン選択'
        required: false
        default: 'current_professional'
        type: choice
        options:
        - 'current_professional'
        - 'cot_enhanced'
        - 'enhanced_persona'
        - 'few_shot_learning'
        - 'constraint_optimization'
        - 'context_aware'
        - 'minimalist'
      comparison_mode:
        description: 'プロンプト比較モード'
        required: false
        default: 'single'
        type: choice
        options:
        - 'single'           # 単一パターンテスト
        - 'ab_test'          # 2パターン比較
        - 'multi_compare'    # 複数パターン比較

jobs:
  podcast-broadcast:
    runs-on: ubuntu-latest
    permissions:
      contents: write # GitHub Pages デプロイ用
      issues: write   # 失敗時Issue作成用

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Python dependencies installed successfully"
        pip list | grep -E "(google|pydub|feedgen|yaml)" || echo "Some podcast dependencies may be missing"

    - name: Download database artifact
      id: download-artifact
      if: |
        github.event_name == 'schedule' || 
        github.event_name == 'push' ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.use_db_artifact == 'true')
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        workflow: main.yml
        name: market-news-db
        path: .
        search_artifacts: true
        
    - name: Check artifact download result
      id: artifact-status
      run: |
        if [ -f "market_news.db" ]; then
          echo "artifact_available=true" >> $GITHUB_OUTPUT
          echo "data_source=database" >> $GITHUB_OUTPUT
          ls -la market_news.db
        else
          echo "artifact_available=false" >> $GITHUB_OUTPUT
          echo "data_source=google_document" >> $GITHUB_OUTPUT
        fi

    - name: Validate database file
      id: validate-db
      if: steps.artifact-status.outputs.artifact_available == 'true'
      run: |
        if sqlite3 market_news.db ".tables" > /dev/null 2>&1; then
          echo "db_valid=true" >> $GITHUB_OUTPUT
        else
          echo "db_valid=false" >> $GITHUB_OUTPUT
          echo "Database file is corrupted, falling back to Google Document"
          rm -f market_news.db
        fi

    - name: Final data source decision
      id: final-source
      run: |
        if [[ -f "market_news.db" && "${{ steps.validate-db.outputs.db_valid }}" == "true" ]]; then
          echo "PODCAST_DATA_SOURCE=database" >> $GITHUB_ENV
          echo "final_source=database" >> $GITHUB_OUTPUT
        else
          echo "PODCAST_DATA_SOURCE=google_document" >> $GITHUB_ENV
          echo "GOOGLE_DOCUMENT_ID=${{ secrets.GOOGLE_DOCUMENT_ID || secrets.GOOGLE_OVERWRITE_DOC_ID }}" >> $GITHUB_ENV
          echo "final_source=google_document" >> $GITHUB_OUTPUT
        fi

    - name: Log data source decision
      run: |
        echo "=== Podcast Data Source Decision ==="
        echo "Trigger: ${{ github.event_name }}"
        echo "Use artifact requested: ${{ github.event.inputs.use_db_artifact || 'N/A (scheduled)' }}"
        echo "Artifact available: ${{ steps.artifact-status.outputs.artifact_available }}"
        echo "Database valid: ${{ steps.validate-db.outputs.db_valid }}"
        echo "Final data source: ${{ steps.final-source.outputs.final_source }}"
        echo "================================="

    - name: Verify dependencies and environment
      run: |
        echo "🔍 必須依存関係確認"
        python --version
        
        # Critical dependencies check
        python -c "
        import sys
        failed = []
        
        critical_modules = [
            'google.cloud.texttospeech',
            'pydub', 
            'feedgen',
            'yaml',
            'requests'
        ]
        
        for module in critical_modules:
            try:
                __import__(module)
                print(f'✅ {module}: OK')
            except ImportError as e:
                print(f'❌ {module}: FAILED - {e}')
                failed.append(module)
        
        if failed:
            print(f'\\nCRITICAL: Missing modules: {failed}')
            sys.exit(1)
        else:
            print('\\n✅ All critical dependencies verified')
        "
        
        # Google Cloud auth check
        if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
          echo "✅ Google Cloud auth configured"
        else
          echo "❌ Google Cloud auth not configured"
        fi

    - name: Run standalone podcast workflow
      env:
        # Core control settings
        ENABLE_PODCAST_GENERATION: 'true'
        PODCAST_FORCE_RUN: ${{ github.event.inputs.force_run || 'true' }}
        PODCAST_TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
        PODCAST_PRODUCTION_MODE: 'true'
        
        # Google Authentication
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        GOOGLE_OVERWRITE_DOC_ID: ${{ secrets.GOOGLE_OVERWRITE_DOC_ID }}
        
        # Google Cloud TTS
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        
        # AI Configuration
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GEMINI_PODCAST_MODEL: ${{ secrets.GEMINI_PODCAST_MODEL || 'gemini-2.5-pro' }}
        
        # LINE Bot Configuration
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
        
        # Podcast Configuration
        PODCAST_RSS_BASE_URL: ${{ secrets.PODCAST_RSS_BASE_URL }}
        PODCAST_AUTHOR_NAME: ${{ secrets.PODCAST_AUTHOR_NAME }}
        PODCAST_AUTHOR_EMAIL: ${{ secrets.PODCAST_AUTHOR_EMAIL }}
        PODCAST_TARGET_DURATION_MINUTES: '10.0'
      timeout-minutes: 20
      run: |
        echo "🎙️ Starting podcast generation..."
        python scripts/core/standalone_podcast_main.py
        
        if [ $? -eq 0 ]; then
          echo "✅ Podcast generation completed successfully"
        else
          echo "❌ Podcast generation failed"
          exit 1
        fi

    - name: Prepare podcast files for deployment
      if: success()
      run: |
        # 公開用ディレクトリを作成
        mkdir -p public/podcast
        
        echo "=== デバッグ: ファイル存在確認 ==="
        echo "Current directory contents:"
        ls -la
        echo "Output directory contents:"
        ls -la output/ || echo "No output directory"
        echo "Output/podcast directory contents:"
        ls -la output/podcast/ || echo "No output/podcast directory"
        echo "Podcast directory contents:"
        ls -la podcast/ || echo "No podcast directory"
        
        # 音声ファイル詳細分析
        echo "=== 音声ファイル詳細分析 ==="
        for audio_file in output/podcast/*.mp3 podcast/*.mp3; do
          if [ -f "$audio_file" ]; then
            echo "分析中: $audio_file"
            
            # ファイル基本情報
            file_size=$(du -h "$audio_file" | cut -f1)
            file_size_bytes=$(stat -f%z "$audio_file" 2>/dev/null || stat -c%s "$audio_file" 2>/dev/null || echo "unknown")
            echo "  ファイルサイズ: $file_size ($file_size_bytes bytes)"
            
            # MP3ヘッダー確認
            if command -v xxd >/dev/null 2>&1; then
              echo "  MP3ヘッダー: $(xxd -l 16 -p "$audio_file" | head -1)"
            fi
            
            # FFprobe（利用可能な場合）での音声分析
            if command -v ffprobe >/dev/null 2>&1; then
              echo "  === FFprobe分析結果 ==="
              ffprobe -v quiet -print_format json -show_format -show_streams "$audio_file" 2>/dev/null | head -20 || echo "  FFprobe分析失敗"
            else
              echo "  FFprobe利用不可"
            fi
            
            # 品質レポートファイルの確認
            quality_report="${audio_file%.*}.quality_report.json"
            if [ -f "$quality_report" ]; then
              echo "  === 品質レポート ==="
              cat "$quality_report" | head -20 || echo "  品質レポート読み取り失敗"
            else
              echo "  品質レポートなし: $quality_report"
            fi
            
            echo ""
          fi
        done
        
        # 生成された音声ファイルを検索してコピー
        DEPLOYED_COUNT=0
        
        # output/podcast/ ディレクトリから音声ファイルを検索
        if [ -d "output/podcast" ]; then
          echo "Searching for audio files in output/podcast/..."
          for audio_file in output/podcast/*.mp3; do
            if [ -f "$audio_file" ]; then
              echo "Found audio file: $audio_file ($(du -h "$audio_file" | cut -f1))"
              cp "$audio_file" public/podcast/
              DEPLOYED_COUNT=$((DEPLOYED_COUNT + 1))
            fi
          done
        fi
        
        # podcast/ ディレクトリからも検索（GitHubPagesPublisher出力用）
        if [ -d "podcast" ]; then
          echo "Searching for audio files in podcast/..."
          for audio_file in podcast/*.mp3; do
            if [ -f "$audio_file" ]; then
              echo "Found audio file: $audio_file ($(du -h "$audio_file" | cut -f1))"
              cp "$audio_file" public/podcast/
              DEPLOYED_COUNT=$((DEPLOYED_COUNT + 1))
            fi
          done
          
          # RSS feed も存在すればコピー
          if [ -f "podcast/podcast.rss" ]; then
            cp podcast/podcast.rss public/podcast/
            echo "RSS feed copied"
          fi
          
          # 品質レポートファイルも存在すればコピー
          for quality_report in podcast/*.quality_report.json; do
            if [ -f "$quality_report" ]; then
              cp "$quality_report" public/podcast/
              echo "Quality report copied: $(basename "$quality_report")"
            fi
          done
        fi
        
        echo "=== デプロイ準備完了 ==="
        echo "Deployed audio files: $DEPLOYED_COUNT"
        echo "Final public/podcast contents:"
        ls -la public/podcast/ || echo "No files in public/podcast"
        
        if [ $DEPLOYED_COUNT -eq 0 ]; then
          echo "⚠️ Warning: No audio files found for deployment"
        else
          echo "✅ Successfully prepared $DEPLOYED_COUNT audio file(s) for deployment"
        fi

    - name: Deploy podcast to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages
        keep_files: true # 既存ファイルを保持（メインワークフローのファイルを保護）
        destination_dir: . # ルートディレクトリにデプロイ
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy daily podcast: ${{ github.run_id }}'

    - name: Cleanup temporary files
      if: always()
      run: |
        # 一時ファイルをクリーンアップ（生成されたファイルは保持）
        rm -rf public/
        rm -f temp_podcast_script.txt
        echo "Temporary files cleaned up (audio files preserved for debugging)"

    - name: Workflow summary
      if: always()
      run: |
        echo "## 📊 Podcast Broadcast Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Use DB Artifact**: ${{ github.event.inputs.use_db_artifact || 'N/A (scheduled)' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Final Data Source**: ${{ steps.final-source.outputs.final_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Available**: ${{ steps.artifact-status.outputs.artifact_available }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Database Valid**: ${{ steps.validate-db.outputs.db_valid }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Run**: ${{ github.event.inputs.force_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Mode**: ${{ github.event.inputs.test_mode || 'false' }}" >> $GITHUB_STEP_SUMMARY
        
        # 生成された音声ファイルを検索してレポート
        AUDIO_FOUND=0
        for audio_file in output/podcast/*.mp3 podcast/*.mp3; do
          if [ -f "$audio_file" ]; then
            file_size=$(du -h "$audio_file" | cut -f1)
            file_size_bytes=$(stat -f%z "$audio_file" 2>/dev/null || stat -c%s "$audio_file" 2>/dev/null || echo "unknown")
            
            echo "- **Podcast Generated**: ✅ Yes ($audio_file)" >> $GITHUB_STEP_SUMMARY
            echo "- **File Size**: $file_size ($file_size_bytes bytes)" >> $GITHUB_STEP_SUMMARY
            
            # 音声長さ情報（ffprobeが利用可能な場合）
            if command -v ffprobe >/dev/null 2>&1; then
              duration=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "$audio_file" 2>/dev/null | cut -d. -f1)
              if [ -n "$duration" ] && [ "$duration" != "" ]; then
                minutes=$((duration / 60))
                seconds=$((duration % 60))
                echo "- **Audio Duration**: ${minutes}:$(printf %02d $seconds)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # 品質レポート情報
            quality_report="${audio_file%.*}.quality_report.json"
            if [ -f "$quality_report" ]; then
              echo "- **Quality Report**: ✅ Available" >> $GITHUB_STEP_SUMMARY
              
              # 品質の概要（JSONから抽出）
              if command -v python3 >/dev/null 2>&1; then
                quality_summary=$(python3 -c "
import json
try:
  with open('$quality_report', 'r') as f:
    data = json.load(f)
  valid = data.get('valid', False)
  duration = data.get('duration_seconds', 0)
  issues_count = len(data.get('issues', []))
  print(f'Valid: {valid}, Duration: {duration:.1f}s, Issues: {issues_count}')
except:
  print('Parse failed')
" 2>/dev/null)
                if [ -n "$quality_summary" ] && [ "$quality_summary" != "Parse failed" ]; then
                  echo "- **Quality Summary**: $quality_summary" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            else
              echo "- **Quality Report**: ❌ Not found" >> $GITHUB_STEP_SUMMARY
            fi
            
            AUDIO_FOUND=1
            break
          fi
        done
        
        if [ $AUDIO_FOUND -eq 0 ]; then
          echo "- **Podcast Generated**: ❌ No audio files found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Collect error details
      if: failure()
      run: |
        echo "Error occurred at: $(date -u)"
        echo "Python version: $(python --version)"
        pip list | grep -E "(google|pydub|feedgen|yaml)" || echo "Missing critical packages"

    - name: Create Issue on Failure
      if: failure() && github.event.pull_request == null
      uses: jayqi/failed-build-issue-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        title-template: "🎙️ Podcast Broadcast Failed #${{ github.run_number }}"
        body-template: |
          ## Podcast Broadcast Failure
          
          **Run ID**: ${{ github.run_id }}
          **Branch**: ${{ github.ref_name }}
          **Triggered by**: ${{ github.actor }}
          **Time**: ${{ github.event.head_commit.timestamp }}
          
          ### Quick Debug Links
          - [View Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ### Common Solutions
          1. Check GitHub Secrets are configured
          2. Verify `GOOGLE_APPLICATION_CREDENTIALS_JSON` is set
          3. Ensure Google Cloud TTS API is enabled
          4. Re-run workflow after checking dependencies
          
          This issue will auto-close when the workflow succeeds.
        label-name: "podcast"
        always-create-new-issue: false