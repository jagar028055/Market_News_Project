name: Daily Podcast Broadcast

on:
  push:
    branches:
      - master  # Êú¨Áï™„É¢„Éº„Éâ„ÉÜ„Çπ„ÉàÁî®„Å´ÂÜçÊúâÂäπÂåñ
  schedule:
    - cron: '30 22 * * *' # JST 7:30 (UTC 22:30) - ÈÄöÂã§ÊôÇÈñìÂ∏Ø
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇíÂèØËÉΩ„Å´„Åô„Çã
    inputs:
      use_db_artifact:
        description: 'Use database artifact from main workflow'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      force_run:
        description: 'Force run even if conditions are not met'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
      test_mode:
        description: 'Run in test mode (no actual broadcast)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      weekdays_only:
        description: 'Run only on weekdays'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      prompt_pattern:
        description: '„Éó„É≠„É≥„Éó„Éà„Éë„Çø„Éº„É≥ÈÅ∏Êäû'
        required: false
        default: 'current_professional'
        type: choice
        options:
        - 'current_professional'
        - 'cot_enhanced'
        - 'enhanced_persona'
        - 'few_shot_learning'
        - 'constraint_optimization'
        - 'context_aware'
        - 'minimalist'
      comparison_mode:
        description: '„Éó„É≠„É≥„Éó„ÉàÊØîËºÉ„É¢„Éº„Éâ'
        required: false
        default: 'single'
        type: choice
        options:
        - 'single'           # Âçò‰∏Ä„Éë„Çø„Éº„É≥„ÉÜ„Çπ„Éà
        - 'ab_test'          # 2„Éë„Çø„Éº„É≥ÊØîËºÉ
        - 'multi_compare'    # Ë§áÊï∞„Éë„Çø„Éº„É≥ÊØîËºÉ
      script_only:
        description: 'Script generation only (no audio/broadcast)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  podcast-broadcast:
    runs-on: ubuntu-latest
    permissions:
      contents: write # GitHub Pages „Éá„Éó„É≠„Ç§Áî®
      issues: write   # Â§±ÊïóÊôÇIssue‰ΩúÊàêÁî®

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Python dependencies installed successfully"
        pip list | grep -E "(google|pydub|feedgen|yaml)" || echo "Some podcast dependencies may be missing"

    - name: Download database artifact
      id: download-artifact
      if: |
        github.event_name == 'schedule' || 
        github.event_name == 'push' ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.use_db_artifact == 'true')
      uses: dawidd6/action-download-artifact@v2
      continue-on-error: true
      with:
        workflow: main.yml
        name: market-news-db
        path: .
        search_artifacts: true
        
    - name: Check artifact download result
      id: artifact-status
      run: |
        if [ -f "market_news.db" ]; then
          echo "artifact_available=true" >> $GITHUB_OUTPUT
          echo "data_source=database" >> $GITHUB_OUTPUT
          ls -la market_news.db
        else
          echo "artifact_available=false" >> $GITHUB_OUTPUT
          echo "data_source=google_document" >> $GITHUB_OUTPUT
        fi

    - name: Validate database file
      id: validate-db
      if: steps.artifact-status.outputs.artifact_available == 'true'
      run: |
        if sqlite3 market_news.db ".tables" > /dev/null 2>&1; then
          echo "db_valid=true" >> $GITHUB_OUTPUT
        else
          echo "db_valid=false" >> $GITHUB_OUTPUT
          echo "Database file is corrupted, falling back to Google Document"
          rm -f market_news.db
        fi

    - name: Final data source decision
      id: final-source
      run: |
        if [[ -f "market_news.db" && "${{ steps.validate-db.outputs.db_valid }}" == "true" ]]; then
          echo "PODCAST_DATA_SOURCE=database" >> $GITHUB_ENV
          echo "final_source=database" >> $GITHUB_OUTPUT
        else
          echo "PODCAST_DATA_SOURCE=google_document" >> $GITHUB_ENV
          echo "GOOGLE_DOCUMENT_ID=${{ secrets.GOOGLE_DOCUMENT_ID || secrets.GOOGLE_OVERWRITE_DOC_ID }}" >> $GITHUB_ENV
          echo "final_source=google_document" >> $GITHUB_OUTPUT
        fi

    - name: Log data source decision
      run: |
        echo "=== Podcast Data Source Decision ==="
        echo "Trigger: ${{ github.event_name }}"
        echo "Use artifact requested: ${{ github.event.inputs.use_db_artifact || 'N/A (scheduled)' }}"
        echo "Artifact available: ${{ steps.artifact-status.outputs.artifact_available }}"
        echo "Database valid: ${{ steps.validate-db.outputs.db_valid }}"
        echo "Final data source: ${{ steps.final-source.outputs.final_source }}"
        echo "================================="

    - name: Verify dependencies and environment
      run: |
        echo "üîç ÂøÖÈ†à‰æùÂ≠òÈñ¢‰øÇÁ¢∫Ë™ç"
        python --version
        
        # Critical dependencies check
        python -c "
        import sys
        failed = []
        
        critical_modules = [
            'google.cloud.texttospeech',
            'pydub', 
            'feedgen',
            'yaml',
            'requests'
        ]
        
        for module in critical_modules:
            try:
                __import__(module)
                print(f'‚úÖ {module}: OK')
            except ImportError as e:
                print(f'‚ùå {module}: FAILED - {e}')
                failed.append(module)
        
        if failed:
            print(f'\\nCRITICAL: Missing modules: {failed}')
            sys.exit(1)
        else:
            print('\\n‚úÖ All critical dependencies verified')
        "
        
        # Google Cloud auth check
        if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON" ]; then
          echo "‚úÖ Google Cloud auth configured"
        else
          echo "‚ö†Ô∏è WARNING: Google Cloud auth not configured"
          echo "üîç DEBUG: Proceeding to investigate audio generation issues"
          echo "üìù NOTE: This may cause TTS authentication failures"
        fi

    - name: Run standalone podcast workflow
      env:
        # Core control settings
        ENABLE_PODCAST_GENERATION: 'true'
        PODCAST_FORCE_RUN: ${{ github.event.inputs.force_run || 'true' }}
        PODCAST_TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}
        PODCAST_PRODUCTION_MODE: 'true'
        PODCAST_SCRIPT_ONLY_MODE: ${{ github.event.inputs.script_only || 'false' }}
        
        # Google Authentication
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        GOOGLE_OVERWRITE_DOC_ID: ${{ secrets.GOOGLE_OVERWRITE_DOC_ID }}
        
        # Google Cloud TTS
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        
        # AI Configuration
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GEMINI_PODCAST_MODEL: ${{ secrets.GEMINI_PODCAST_MODEL || 'gemini-2.5-pro' }}
        
        # LINE Bot Configuration
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
        
        # Podcast Configuration
        PODCAST_RSS_BASE_URL: ${{ secrets.PODCAST_RSS_BASE_URL }}
        PODCAST_AUTHOR_NAME: ${{ secrets.PODCAST_AUTHOR_NAME }}
        PODCAST_AUTHOR_EMAIL: ${{ secrets.PODCAST_AUTHOR_EMAIL }}
        PODCAST_TARGET_DURATION_MINUTES: '10.0'
      timeout-minutes: 20
      run: |
        echo "üéôÔ∏è Starting podcast generation..."
        python scripts/core/standalone_podcast_main.py
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Podcast generation completed successfully"
        else
          echo "‚ùå Podcast generation failed"
          exit 1
        fi

    - name: Display script-only mode results
      if: env.PODCAST_SCRIPT_ONLY_MODE == 'true'
      run: |
        echo "üìù „Çπ„ÇØ„É™„Éó„ÉàÂ∞ÇÁî®„É¢„Éº„Éâ - ÁîüÊàêÁµêÊûúÁ¢∫Ë™ç‰∏≠..."
        
        # Âè∞Êú¨„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
        SCRIPT_FOUND=0
        for script_file in output/podcast/*_script.txt; do
          if [ -f "$script_file" ]; then
            echo "‚úÖ Âè∞Êú¨„Éï„Ç°„Ç§„É´Áô∫Ë¶ã: $script_file"
            echo "üìä Âè∞Êú¨Áµ±Ë®à:"
            echo "  ÊñáÂ≠óÊï∞: $(wc -c < "$script_file")"
            echo "  Ë°åÊï∞: $(wc -l < "$script_file")"
            echo "  „Çµ„Ç§„Ç∫: $(du -h "$script_file" | cut -f1)"
            echo ""
            echo "üìÑ Âè∞Êú¨ÂÜÖÂÆπ„Éó„É¨„Éì„É•„Éº (ÊúÄÂàù„ÅÆ50Ë°å):"
            echo "======================================"
            head -50 "$script_file" | while IFS= read -r line; do
              echo "  $line"
            done
            echo "======================================"
            
            # GitHub Actions Summary „Å´„ÇÇÂá∫Âäõ
            echo "SCRIPT_FILE_PATH=$script_file" >> $GITHUB_ENV
            echo "SCRIPT_CONTENT_PREVIEW=true" >> $GITHUB_ENV
            SCRIPT_FOUND=1
            break
          fi
        done
        
        # Âè∞Êú¨„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà
        if [ $SCRIPT_FOUND -eq 0 ]; then
          echo "‚ö†Ô∏è Âè∞Êú¨„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:"
          echo "  ‰∫àÊÉ≥„Éë„Çπ: output/podcast/*_script.txt"
          echo "  Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™Á¢∫Ë™ç:"
          ls -la output/ 2>/dev/null || echo "    output/ „Éá„Ç£„É¨„ÇØ„Éà„É™„Å™„Åó"
          ls -la output/podcast/ 2>/dev/null || echo "    output/podcast/ „Éá„Ç£„É¨„ÇØ„Éà„É™„Å™„Åó"
          
          # „Çπ„ÇØ„É™„Éó„ÉàÁîüÊàê„ÅÆË©≥Á¥∞„É≠„Ç∞Á¢∫Ë™ç
          echo "  „Çπ„ÇØ„É™„Éó„ÉàÁîüÊàê„É≠„Ç∞Á¢∫Ë™ç:"
          if [ -f "podcast_workflow.log" ]; then
            echo "    podcast_workflow.log Â≠òÂú® ($(du -h podcast_workflow.log | cut -f1))"
            echo "    ÊúÄÊñ∞„ÅÆ„É≠„Ç∞„Ç®„É≥„Éà„É™:"
            tail -20 podcast_workflow.log | while IFS= read -r line; do
              echo "    $line"
            done
          else
            echo "    podcast_workflow.log „Å™„Åó"
          fi
        fi

    - name: Prepare podcast files for deployment
      if: success()
      run: |
        # ÂÖ¨ÈñãÁî®„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
        mkdir -p public/podcast
        
        echo "=== „Éá„Éê„ÉÉ„Ç∞: „Éï„Ç°„Ç§„É´Â≠òÂú®Á¢∫Ë™ç ==="
        echo "Current directory contents:"
        ls -la
        echo "Output directory contents:"
        ls -la output/ || echo "No output directory"
        echo "Output/podcast directory contents:"
        ls -la output/podcast/ || echo "No output/podcast directory"
        echo "Podcast directory contents:"
        ls -la podcast/ || echo "No podcast directory"
        
        # Èü≥Â£∞„Éï„Ç°„Ç§„É´Ë©≥Á¥∞ÂàÜÊûê
        echo "=== Èü≥Â£∞„Éï„Ç°„Ç§„É´Ë©≥Á¥∞ÂàÜÊûê ==="
        for audio_file in output/podcast/*.mp3 podcast/*.mp3; do
          if [ -f "$audio_file" ]; then
            echo "ÂàÜÊûê‰∏≠: $audio_file"
            
            # „Éï„Ç°„Ç§„É´Âü∫Êú¨ÊÉÖÂ†±
            file_size=$(du -h "$audio_file" | cut -f1)
            file_size_bytes=$(stat -f%z "$audio_file" 2>/dev/null || stat -c%s "$audio_file" 2>/dev/null || echo "unknown")
            echo "  „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: $file_size ($file_size_bytes bytes)"
            
            # MP3„Éò„ÉÉ„ÉÄ„ÉºÁ¢∫Ë™ç
            if command -v xxd >/dev/null 2>&1; then
              echo "  MP3„Éò„ÉÉ„ÉÄ„Éº: $(xxd -l 16 -p "$audio_file" | head -1)"
            fi
            
            # FFprobeÔºàÂà©Áî®ÂèØËÉΩ„Å™Â†¥ÂêàÔºâ„Åß„ÅÆÈü≥Â£∞ÂàÜÊûê
            if command -v ffprobe >/dev/null 2>&1; then
              echo "  === FFprobeÂàÜÊûêÁµêÊûú ==="
              ffprobe -v quiet -print_format json -show_format -show_streams "$audio_file" 2>/dev/null | head -20 || echo "  FFprobeÂàÜÊûêÂ§±Êïó"
            else
              echo "  FFprobeÂà©Áî®‰∏çÂèØ"
            fi
            
            # ÂìÅË≥™„É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„ÅÆÁ¢∫Ë™ç
            quality_report="${audio_file%.*}.quality_report.json"
            if [ -f "$quality_report" ]; then
              echo "  === ÂìÅË≥™„É¨„Éù„Éº„Éà ==="
              cat "$quality_report" | head -20 || echo "  ÂìÅË≥™„É¨„Éù„Éº„ÉàË™≠„ÅøÂèñ„ÇäÂ§±Êïó"
            else
              echo "  ÂìÅË≥™„É¨„Éù„Éº„Éà„Å™„Åó: $quality_report"
            fi
            
            echo ""
          fi
        done
        
        # ÁîüÊàê„Åï„Çå„ÅüÈü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢„Åó„Å¶„Ç≥„Éî„Éº
        DEPLOYED_COUNT=0
        
        # output/podcast/ „Éá„Ç£„É¨„ÇØ„Éà„É™„Åã„ÇâÈü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
        if [ -d "output/podcast" ]; then
          echo "Searching for audio files in output/podcast/..."
          for audio_file in output/podcast/*.mp3; do
            if [ -f "$audio_file" ]; then
              echo "Found audio file: $audio_file ($(du -h "$audio_file" | cut -f1))"
              cp "$audio_file" public/podcast/
              DEPLOYED_COUNT=$((DEPLOYED_COUNT + 1))
            fi
          done
        fi
        
        # podcast/ „Éá„Ç£„É¨„ÇØ„Éà„É™„Åã„Çâ„ÇÇÊ§úÁ¥¢ÔºàGitHubPagesPublisherÂá∫ÂäõÁî®Ôºâ
        if [ -d "podcast" ]; then
          echo "Searching for audio files in podcast/..."
          for audio_file in podcast/*.mp3; do
            if [ -f "$audio_file" ]; then
              echo "Found audio file: $audio_file ($(du -h "$audio_file" | cut -f1))"
              cp "$audio_file" public/podcast/
              DEPLOYED_COUNT=$((DEPLOYED_COUNT + 1))
            fi
          done
          
          # RSS feed „ÇÇÂ≠òÂú®„Åô„Çå„Å∞„Ç≥„Éî„ÉºÔºàË§áÊï∞„Éï„Ç°„Ç§„É´Âêç„Å´ÂØæÂøúÔºâ
          RSS_COPIED=0
          for rss_file in podcast/podcast.rss podcast/feed.xml; do
            if [ -f "$rss_file" ]; then
              # Áµ±‰∏Ä„Éï„Ç°„Ç§„É´Âêç„Åß„Ç≥„Éî„ÉºÔºàfeed.xml „Å´Áµ±‰∏ÄÔºâ
              cp "$rss_file" public/podcast/feed.xml
              echo "RSS feed copied: $(basename "$rss_file") ‚Üí feed.xml"
              RSS_COPIED=1
              break
            fi
          done
          
          if [ $RSS_COPIED -eq 0 ]; then
            echo "‚ö†Ô∏è RSS feed not found in podcast/ directory"
          fi
          
          # ÂìÅË≥™„É¨„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„ÇÇÂ≠òÂú®„Åô„Çå„Å∞„Ç≥„Éî„Éº
          for quality_report in podcast/*.quality_report.json; do
            if [ -f "$quality_report" ]; then
              cp "$quality_report" public/podcast/
              echo "Quality report copied: $(basename "$quality_report")"
            fi
          done
        fi
        
        echo "=== „Éá„Éó„É≠„Ç§Ê∫ñÂÇôÂÆå‰∫Ü ==="
        echo "Deployed audio files: $DEPLOYED_COUNT"
        echo "Final public/podcast contents:"
        ls -la public/podcast/ || echo "No files in public/podcast"
        
        if [ $DEPLOYED_COUNT -eq 0 ]; then
          echo "‚ùå CRITICAL: No audio files found for deployment"
          echo "üö® This indicates audio generation failed completely"
          echo "üìä Deployment cannot proceed without audio files"
          exit 1
        else
          echo "‚úÖ Successfully prepared $DEPLOYED_COUNT audio file(s) for deployment"
        fi

    - name: Deploy podcast to GitHub Pages
      if: success()
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages
        keep_files: true # Êó¢Â≠ò„Éï„Ç°„Ç§„É´„Çí‰øùÊåÅÔºà„É°„Ç§„É≥„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆ„Éï„Ç°„Ç§„É´„Çí‰øùË≠∑Ôºâ
        destination_dir: . # „É´„Éº„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Å´„Éá„Éó„É≠„Ç§
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy daily podcast: ${{ github.run_id }}'
    
    - name: Verify deployed podcast accessibility
      if: success()
      run: |
        echo "=== „Éù„ÉÉ„Éâ„Ç≠„É£„Çπ„ÉàÈÖç‰ø°Ê§úË®º ==="
        
        # GitHub Pages URLÊßãÁØâÔºà„É™„Éù„Ç∏„Éà„É™ÊÉÖÂ†±„Åã„ÇâËá™ÂãïÁîüÊàêÔºâ
        REPO_OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        GITHUB_PAGES_BASE="https://${REPO_OWNER}.github.io/${REPO_NAME}"
        
        echo "GitHub Pages „Éô„Éº„ÇπURL: $GITHUB_PAGES_BASE"
        echo "ÈÖç‰ø°Ê§úË®ºÁî®URL: $GITHUB_PAGES_BASE/podcast/"
        
        # Â∞ë„ÅóÂæÖÊ©üÔºàGitHub Pages„ÅÆ„Éá„Éó„É≠„Ç§ÂèçÊò†„ÇíÂæÖ„Å§Ôºâ
        echo "GitHub PagesÂèçÊò†ÂæÖÊ©ü‰∏≠Ôºà30ÁßíÔºâ..."
        sleep 30
        
        # Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„ÉÅ„Çß„ÉÉ„ÇØ
        VERIFICATION_FAILED=0
        
        for audio_file in public/podcast/*.mp3; do
          if [ -f "$audio_file" ]; then
            # „Éï„Ç°„Ç§„É´Âêç„ÇíÂèñÂæó
            filename=$(basename "$audio_file")
            audio_url="${GITHUB_PAGES_BASE}/podcast/${filename}"
            
            echo "Ê§úË®º‰∏≠: $audio_url"
            
            # curl„ÅßHTTPÂøúÁ≠îÁ¢∫Ë™çÔºàÊúÄÂ§ß3Âõû„É™„Éà„É©„Ç§Ôºâ
            for attempt in {1..3}; do
              if curl -fsSL --head "$audio_url" >/dev/null 2>&1; then
                echo "‚úÖ „Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ: $audio_url (Ë©¶Ë°å $attempt)"
                break
              else
                echo "‚ö†Ô∏è „Ç¢„ÇØ„Çª„ÇπÂ§±Êïó: $audio_url (Ë©¶Ë°å $attempt/3)"
                if [ $attempt -eq 3 ]; then
                  echo "‚ùå „Ç¢„ÇØ„Çª„Çπ‰∏çËÉΩ: $audio_url"
                  VERIFICATION_FAILED=$((VERIFICATION_FAILED + 1))
                fi
                sleep 10
              fi
            done
            
            # „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Á¢∫Ë™ç
            if curl -fsSL --head "$audio_url" 2>/dev/null | grep -i content-length; then
              size=$(curl -fsSL --head "$audio_url" 2>/dev/null | grep -i content-length | cut -d' ' -f2 | tr -d '\r')
              size_mb=$(echo "scale=2; $size / 1024 / 1024" | bc 2>/dev/null || echo "‰∏çÊòé")
              echo "  „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: ${size_mb}MB"
            fi
          fi
        done
        
        # RSS „Éï„Ç£„Éº„ÉâÊ§úË®ºÔºàÁµ±‰∏ÄÂæå„ÅÆfeed.xml„ÇíÂÑ™ÂÖàÔºâ
        RSS_URLS=("$GITHUB_PAGES_BASE/podcast/feed.xml" "$GITHUB_PAGES_BASE/feed.xml" "$GITHUB_PAGES_BASE/podcast/podcast.rss")
        RSS_FOUND=0
        RSS_FINAL_URL=""
        
        for rss_url in "${RSS_URLS[@]}"; do
          if curl -fsSL --head "$rss_url" >/dev/null 2>&1; then
            echo "‚úÖ RSS „Éï„Ç£„Éº„ÉâÁ¢∫Ë™ç: $rss_url"
            RSS_FOUND=1
            RSS_FINAL_URL="$rss_url"
            
            # RSSÂÜÖÂÆπ„ÅÆÂü∫Êú¨„ÉÅ„Çß„ÉÉ„ÇØ
            if curl -fsSL "$rss_url" | grep -q "<rss"; then
              echo "  RSSÂΩ¢Âºè: Ê≠£Â∏∏"
              
              # „Ç®„Éî„ÇΩ„Éº„ÉâÊï∞Á¢∫Ë™ç
              episode_count=$(curl -fsSL "$rss_url" | grep -c "<item>" || echo "0")
              echo "  „Ç®„Éî„ÇΩ„Éº„ÉâÊï∞: $episode_count"
            else
              echo "  ‚ö†Ô∏è RSSÂΩ¢Âºè: ‰∏çÊ≠£"
            fi
            break
          fi
        done
        
        if [ $RSS_FOUND -eq 0 ]; then
          echo "‚ùå RSS „Éï„Ç£„Éº„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
          VERIFICATION_FAILED=$((VERIFICATION_FAILED + 1))
        fi
        
        # ÁµêÊûú„Çµ„Éû„É™„Éº
        echo "=== ÈÖç‰ø°Ê§úË®ºÁµêÊûú ==="
        if [ $VERIFICATION_FAILED -eq 0 ]; then
          echo "‚úÖ ÂÖ®„Å¶„ÅÆÊ§úË®º„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü"
          echo "üì° ÈÖç‰ø°URL: $GITHUB_PAGES_BASE/podcast/"
          if [ -n "$RSS_FINAL_URL" ]; then
            echo "üìÑ RSS URL: $RSS_FINAL_URL"
          fi
        else
          echo "‚ùå $VERIFICATION_FAILED ‰ª∂„ÅÆÊ§úË®ºÂ§±Êïó„Åå„ÅÇ„Çä„Åæ„Åô"
          echo "GitHub Pages„ÅÆÂèçÊò†„Å´„ÅØÊôÇÈñì„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô"
          echo "üì° ÊÉ≥ÂÆöÈÖç‰ø°URL: $GITHUB_PAGES_BASE/podcast/"
        fi

    - name: Cleanup temporary files
      if: always()
      run: |
        # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºàÁîüÊàê„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÅØ‰øùÊåÅÔºâ
        rm -rf public/
        rm -f temp_podcast_script.txt
        echo "Temporary files cleaned up (audio files preserved for debugging)"

    - name: Workflow summary
      if: always()
      run: |
        echo "## üìä Podcast Broadcast Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Use DB Artifact**: ${{ github.event.inputs.use_db_artifact || 'N/A (scheduled)' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Final Data Source**: ${{ steps.final-source.outputs.final_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Available**: ${{ steps.artifact-status.outputs.artifact_available }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Database Valid**: ${{ steps.validate-db.outputs.db_valid }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Run**: ${{ github.event.inputs.force_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Mode**: ${{ github.event.inputs.test_mode || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Script Only Mode**: ${{ github.event.inputs.script_only || 'false' }}" >> $GITHUB_STEP_SUMMARY
        
        # Âè∞Êú¨ÊÉÖÂ†±„ÇíËøΩÂä†ÔºàÂ∏∏ÊôÇË°®Á§∫Ôºâ
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìù Script Analysis Results" >> $GITHUB_STEP_SUMMARY
        
        # Âè∞Êú¨„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
        SCRIPT_SUMMARY_FOUND=0
        for script_file in output/podcast/*_script.txt; do
          if [ -f "$script_file" ]; then
            CHAR_COUNT=$(wc -c < "$script_file")
            LINE_COUNT=$(wc -l < "$script_file")
            FILE_SIZE=$(du -h "$script_file" | cut -f1)
            
            echo "- **Script File**: ‚úÖ $(basename "$script_file")" >> $GITHUB_STEP_SUMMARY
            echo "- **Character Count**: $CHAR_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Line Count**: $LINE_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **File Size**: $FILE_SIZE" >> $GITHUB_STEP_SUMMARY
            
            # Âè∞Êú¨„ÅÆÊúÄÂàù„ÅÆ200ÊñáÂ≠ó„Çí„Éó„É¨„Éì„É•„ÉºË°®Á§∫ÔºàGeminiË™¨ÊòéÊñá„ÉÅ„Çß„ÉÉ„ÇØËæº„ÅøÔºâ
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìÑ Script Preview (First 200 characters)" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -c 200 "$script_file" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "..." >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            # Âè∞Êú¨ÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú„ÅÆË°®Á§∫Ôºà„É°„Çø„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºâ
            metadata_file="${script_file%_script.txt}_script_metadata.json"
            if [ -f "$metadata_file" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üîç Script Quality Check" >> $GITHUB_STEP_SUMMARY
              
              # ‰∏çÈÅ©ÂàáÊñáË®ÄÊ§úÂá∫ÁµêÊûú
              inappropriate_found=$(jq -r '.inappropriate_content.found // false' "$metadata_file" 2>/dev/null || echo "false")
              if [ "$inappropriate_found" == "true" ]; then
                inappropriate_issues=$(jq -r '.inappropriate_content.issues[]?' "$metadata_file" 2>/dev/null | head -3)
                echo "- **‚ö†Ô∏è Inappropriate Content**: Found" >> $GITHUB_STEP_SUMMARY
                echo "  - Issues: $inappropriate_issues" >> $GITHUB_STEP_SUMMARY
              else
                echo "- **‚úÖ Content Check**: Clean" >> $GITHUB_STEP_SUMMARY
              fi
              
              # ÊßãÈÄ†Ê§úË®ºÁµêÊûú
              structure_valid=$(jq -r '.structure_validation.valid // false' "$metadata_file" 2>/dev/null || echo "false") 
              if [ "$structure_valid" == "true" ]; then
                echo "- **‚úÖ Structure**: Valid (Opening/Main/Closing)" >> $GITHUB_STEP_SUMMARY
              else
                structure_issues=$(jq -r '.structure_validation.issues[]?' "$metadata_file" 2>/dev/null | head -3)
                echo "- **‚ö†Ô∏è Structure**: Issues found" >> $GITHUB_STEP_SUMMARY
                echo "  - Issues: $structure_issues" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            SCRIPT_SUMMARY_FOUND=1
            break
          fi
        done
        
        if [ $SCRIPT_SUMMARY_FOUND -eq 0 ]; then
          echo "- **Script File**: ‚ùå Not found" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Script generation may have failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # ÁîüÊàê„Åï„Çå„ÅüÈü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢„Åó„Å¶„É¨„Éù„Éº„Éà
        AUDIO_FOUND=0
        for audio_file in output/podcast/*.mp3 podcast/*.mp3; do
          if [ -f "$audio_file" ]; then
            file_size=$(du -h "$audio_file" | cut -f1)
            file_size_bytes=$(stat -f%z "$audio_file" 2>/dev/null || stat -c%s "$audio_file" 2>/dev/null || echo "unknown")
            
            echo "- **Podcast Generated**: ‚úÖ Yes ($audio_file)" >> $GITHUB_STEP_SUMMARY
            echo "- **File Size**: $file_size ($file_size_bytes bytes)" >> $GITHUB_STEP_SUMMARY
            
            # Èü≥Â£∞Èï∑„ÅïÊÉÖÂ†±Ôºàffprobe„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
            if command -v ffprobe >/dev/null 2>&1; then
              duration=$(ffprobe -v quiet -show_entries format=duration -of csv=p=0 "$audio_file" 2>/dev/null | cut -d. -f1)
              if [ -n "$duration" ] && [ "$duration" != "" ]; then
                minutes=$((duration / 60))
                seconds=$((duration % 60))
                echo "- **Audio Duration**: ${minutes}:$(printf %02d $seconds)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
            
            # ÂìÅË≥™„É¨„Éù„Éº„ÉàÊÉÖÂ†±
            quality_report="${audio_file%.*}.quality_report.json"
            if [ -f "$quality_report" ]; then
              echo "- **Quality Report**: ‚úÖ Available" >> $GITHUB_STEP_SUMMARY
              
              # ÂìÅË≥™„ÅÆÊ¶ÇË¶ÅÔºàJSON„Åã„ÇâÊäΩÂá∫Ôºâ
              if command -v python3 >/dev/null 2>&1; then
                quality_summary=$(python3 -c "import json; data=json.load(open('$quality_report')); print(f'Valid: {data.get(\"valid\",False)}, Duration: {data.get(\"duration_seconds\",0):.1f}s, Issues: {len(data.get(\"issues\",[]))}')" 2>/dev/null || echo "Parse failed")
                if [ -n "$quality_summary" ] && [ "$quality_summary" != "Parse failed" ]; then
                  echo "- **Quality Summary**: $quality_summary" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            else
              echo "- **Quality Report**: ‚ùå Not found" >> $GITHUB_STEP_SUMMARY
            fi
            
            AUDIO_FOUND=1
            break
          fi
        done
        
        if [ $AUDIO_FOUND -eq 0 ]; then
          echo "- **Podcast Generated**: ‚ùå No audio files found" >> $GITHUB_STEP_SUMMARY
        fi
        
        # ÈÖç‰ø°URLÊÉÖÂ†±„ÇíËøΩÂä†
        REPO_OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)
        REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
        GITHUB_PAGES_BASE="https://${REPO_OWNER}.github.io/${REPO_NAME}"
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üì° ÈÖç‰ø°ÊÉÖÂ†±" >> $GITHUB_STEP_SUMMARY
        echo "- **ÈÖç‰ø°„Éô„Éº„ÇπURL**: $GITHUB_PAGES_BASE/podcast/" >> $GITHUB_STEP_SUMMARY
        echo "- **RSS„Éï„Ç£„Éº„Éâ**: $GITHUB_PAGES_BASE/podcast/feed.xml" >> $GITHUB_STEP_SUMMARY
        echo "- **ÈÖç‰ø°„Éñ„É©„É≥„ÉÅ**: gh-pages" >> $GITHUB_STEP_SUMMARY

    - name: Collect error details
      if: failure()
      run: |
        echo "Error occurred at: $(date -u)"
        echo "Python version: $(python --version)"
        pip list | grep -E "(google|pydub|feedgen|yaml)" || echo "Missing critical packages"

    - name: Create Issue on Failure
      if: failure() && github.event.pull_request == null
      uses: jayqi/failed-build-issue-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        title-template: "üéôÔ∏è Podcast Broadcast Failed #${{ github.run_number }}"
        body-template: |
          ## Podcast Broadcast Failure
          
          **Run ID**: ${{ github.run_id }}
          **Branch**: ${{ github.ref_name }}
          **Triggered by**: ${{ github.actor }}
          **Time**: ${{ github.event.head_commit.timestamp }}
          
          ### Quick Debug Links
          - [View Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ### Common Solutions
          1. Check GitHub Secrets are configured
          2. Verify `GOOGLE_APPLICATION_CREDENTIALS_JSON` is set
          3. Ensure Google Cloud TTS API is enabled
          4. Re-run workflow after checking dependencies
          
          This issue will auto-close when the workflow succeeds.
        label-name: "podcast"
        always-create-new-issue: false