name: Social Content Preview

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode for design preview'
        required: false
        default: 'demo'
        type: choice
        options:
          - 'demo'
          - 'database'
          - 'llm_test'
      enable_llm:
        description: 'Enable LLM optimization'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
  push:
    branches:
      - 'feature/social-*'
      - 'master'
      - 'main'
    paths:
      - 'src/core/llm_content_optimizer.py'
      - 'src/core/social_content_generator.py'
      - 'src/core/gdocs_manual_curator.py'
      - 'src/renderers/**'
      - 'assets/templates/**'
      - 'scripts/dev/generate_social_demo.py'
      - 'scripts/dev/generate_from_artifacts.py'
      - 'scripts/dev/test_social_llm.py'
      - '.github/workflows/social-content-preview.yml'
      - 'index.html' # メインページ変更時もプレビュー再生成

jobs:
  social-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install system fonts for Japanese support
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-noto-cjk fonts-noto-color-emoji

    - name: Create demo social content
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # 常にデータベースを使用してSNSコンテンツを生成
        echo "🔄 データベースからSNSコンテンツ生成中..."
        
        # テストモードに応じた追加処理
        case "${{ github.event.inputs.test_mode }}" in
          "llm_test")
            echo "🤖 LLM最適化テスト実行"
            python scripts/dev/test_social_llm.py || echo "⚠️ LLMテストに失敗 - 通常生成を継続"
            ;;
          "demo")
            echo "🎨 デモモード指定 - デモデータで生成"
            python scripts/dev/generate_social_demo.py
            ;;
          *)
            echo "📊 データベース記事を使用して生成"
            ;;
        esac
        
        # メイン生成処理（デモモード以外はアーティファクト使用）
        if [ "${{ github.event.inputs.test_mode }}" != "demo" ]; then
          echo "📊 data/articles.jsonから記事を取得してSNSコンテンツ生成"
          python scripts/dev/generate_from_artifacts.py
        fi

    - name: Verify generated content
      run: |
        echo "=== 生成されたコンテンツを確認 ==="
        
        # SNS画像の確認
        if [ -d "build/social" ]; then
          echo "✅ SNS画像ディレクトリ:"
          find build/social -type f -name "*.png" | head -5
          
          # ファイルサイズ確認
          for img in build/social/*/*.png; do
            if [ -f "$img" ]; then
              size=$(stat -c%s "$img")
              echo "📸 $img: ${size} bytes"
            fi
          done
        else
          echo "❌ SNS画像が生成されていません"
        fi
        
        # note記事の確認  
        if [ -d "build/note" ]; then
          echo "✅ note記事ディレクトリ:"
          find build/note -type f -name "*.md" | head -3
          
          # 文字数確認
          for note in build/note/*.md; do
            if [ -f "$note" ]; then
              chars=$(wc -c < "$note")
              echo "📝 $note: ${chars} 文字"
            fi
          done
        else
          echo "❌ note記事が生成されていません"
        fi
        
        # ログファイルの確認
        if [ -d "logs/social" ]; then
          echo "✅ 生成ログ:"
          find logs/social -name "*.json" | head -3
        fi

    - name: Save generated content to repository
      run: |
        echo "💾 生成されたコンテンツをリポジトリに保存"
        
        # メインワークフローがアクセスできる場所に保存
        mkdir -p public/preview/social public/preview/note public/preview/logs
        
        # 生成されたSNSコンテンツを公開ディレクトリにコピー
        if [ -d "build/social" ]; then
          echo "📸 SNS画像を保存: public/preview/social/"
          cp -r build/social/* public/preview/social/ 2>/dev/null || true
          
          # 保存されたファイル確認
          echo "保存されたSNS画像:"
          find public/preview/social -name "*.png" | head -5
        fi
        
        if [ -d "build/note" ]; then
          echo "📝 note記事を保存: public/preview/note/"
          cp -r build/note/* public/preview/note/ 2>/dev/null || true
          
          # 保存されたファイル確認
          echo "保存されたnote記事:"
          find public/preview/note -name "*.md" | head -3
        fi
        
        if [ -d "logs/social" ]; then
          echo "📊 ログを保存: public/preview/logs/"
          cp -r logs/social/* public/preview/logs/ 2>/dev/null || true
        fi
        
        # SNSプレビュー用インデックスHTMLも保存
        cat > public/preview/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ja">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Social Content Preview</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif; margin: 2rem; }
                .container { max-width: 1200px; margin: 0 auto; }
                .section { margin: 2rem 0; padding: 1.5rem; border: 1px solid #ddd; border-radius: 8px; }
                .image-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem; }
                .image-item { text-align: center; }
                .image-item img { max-width: 100%; height: auto; border: 1px solid #ccc; border-radius: 4px; }
                .note-preview { background: #f9f9f9; padding: 1rem; border-radius: 4px; max-height: 400px; overflow-y: auto; }
                pre { background: #f4f4f4; padding: 1rem; border-radius: 4px; overflow-x: auto; }
                .meta { color: #666; font-size: 0.9em; }
            </style>
        </head>
        <body>
            <div class="container">
                <nav style="background: #f5f5f5; padding: 1rem; border-radius: 8px; margin-bottom: 2rem;">
                    <a href="https://jagar028055.github.io/Market_News_Project/" style="color: #0066cc; text-decoration: none; font-weight: bold;">← メインニュースページに戻る</a>
                    <span style="color: #666; margin: 0 1rem;">|</span>
                    <span style="color: #666; font-size: 0.9em;">SNS専用プレビューサイト</span>
                </nav>
                
                <h1>🎨 Social Content Preview</h1>
                <p class="meta">Generated: $(date)</p>
                
                <div class="section">
                    <h2>📸 SNS画像</h2>
                    <div class="image-grid" id="social-images">
                        <!-- JavaScript で画像を動的に挿入 -->
                    </div>
                </div>
                
                <div class="section">
                    <h2>📝 note記事</h2>
                    <div id="note-articles">
                        <!-- JavaScript で記事を動的に挿入 -->
                    </div>
                </div>
                
                <div class="section">
                    <h2>📊 生成ログ</h2>
                    <div id="generation-logs">
                        <!-- JavaScript でログを動的に挿入 -->
                    </div>
                </div>
            </div>
            
            <script>
                // 実際に生成されるファイルを動的に検索・表示
                async function loadSocialContent() {
                    // 今日の日付を取得
                    const today = new Date().toISOString().slice(0,10).replace(/-/g, '');
                    
                    // SNS画像の表示
                    const imageFiles = [
                        'news_01_16x9.png',
                        'news_02_16x9.png', 
                        'news_03_16x9.png'
                    ];
                    
                    let imagesHtml = '';
                    imageFiles.forEach(filename => {
                        // 日付フォルダ構造を確認してパスを設定
                        const imagePath = \`social/\${today}/\${filename}\`;
                        imagesHtml += \`
                            <div class="image-item">
                                <img src="\${imagePath}" alt="\${filename}" 
                                     onload="this.style.display='block'; this.nextElementSibling.nextElementSibling.style.color='green'; this.nextElementSibling.nextElementSibling.innerHTML='✅ \${filename}';" 
                                     onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                                <p style="display:none; color:red;">❌ 画像読み込み失敗: \${filename}</p>
                                <p style="color:#666;">\${filename}</p>
                            </div>
                        \`;
                    });
                    
                    document.getElementById('social-images').innerHTML = imagesHtml;
                    
                    // note記事の表示
                    const noteDate = new Date().toISOString().slice(0,10);
                    const notePath = \`note/\${noteDate}.md\`;
                    
                    // note記事の存在確認とプレビュー表示
                    try {
                        const noteResponse = await fetch(notePath);
                        if (noteResponse.ok) {
                            const noteContent = await noteResponse.text();
                            const noteHtml = \`
                                <div>
                                    <h3>📝 \${noteDate}.md</h3>
                                    <div style="border: 1px solid #ccc; border-radius: 4px; padding: 1rem; background: #f9f9f9;">
                                        <p><a href="\${notePath}" target="_blank" style="color: #0066cc; text-decoration: none; font-weight: bold;">📖 記事を別タブで開く</a></p>
                                        <div class="note-preview" style="margin-top: 1rem; max-height: 200px; overflow-y: auto; background: white; padding: 1rem; border-radius: 4px;">
                                            <pre style="white-space: pre-wrap; font-family: inherit; background: none; padding: 0; margin: 0;">\${noteContent.substring(0, 500)}...</pre>
                                        </div>
                                        <p class="meta" style="color: #666; font-size: 0.9em; margin-top: 0.5rem;">文字数: \${noteContent.length} 文字</p>
                                    </div>
                                </div>
                            \`;
                            document.getElementById('note-articles').innerHTML = noteHtml;
                        } else {
                            throw new Error('Note not found');
                        }
                    } catch (error) {
                        const noteHtml = \`
                            <div>
                                <h3>📝 note記事</h3>
                                <div style="border: 1px solid #ccc; border-radius: 4px; padding: 1rem; background: #fff3cd;">
                                    <p style="color: #856404;">⚠️ note記事がまだ生成されていません</p>
                                    <p class="meta" style="color: #666; font-size: 0.9em;">期待パス: \${notePath}</p>
                                </div>
                            </div>
                        \`;
                        document.getElementById('note-articles').innerHTML = noteHtml;
                    }
                }
                
                // ページ読み込み時に実行
                document.addEventListener('DOMContentLoaded', loadSocialContent);
            </script>
        </body>
        </html>
        EOF
        
        echo "✅ SNSコンテンツの保存完了"

    - name: Commit generated social content
      run: |
        echo "📝 生成されたSNSコンテンツをGitにコミット"
        
        # Git設定
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 変更をステージング
        git add public/preview/
        
        # コミットする変更があるか確認
        if git diff --staged --quiet; then
          echo "⚠️ コミットする変更がありません"
        else
          # コミット実行
          git commit -m "feat: Generate social content for $(date +%Y-%m-%d)
          
          📸 SNS画像生成完了
          📝 note記事生成完了  
          📊 生成ログ保存完了
          
          保存場所:
          - public/preview/social/ (SNS画像)
          - public/preview/note/ (note記事)
          - public/preview/logs/ (生成ログ)
          - public/preview/index.html (プレビューページ)
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # プッシュ実行
          git push
          
          echo "✅ SNSコンテンツをリポジトリにコミット・プッシュしました"
        fi

    - name: Create run summary
      run: |
        echo "# 🎨 Social Content Preview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 生成結果" >> $GITHUB_STEP_SUMMARY
        
        # SNS画像の結果
        if [ -d "build/social" ]; then
          echo "### 📸 SNS画像" >> $GITHUB_STEP_SUMMARY
          image_count=$(find build/social -name "*.png" | wc -l)
          echo "- 生成枚数: ${image_count}枚" >> $GITHUB_STEP_SUMMARY
          
          for img in build/social/*/*.png; do
            if [ -f "$img" ]; then
              filename=$(basename "$img")
              size=$(stat -c%s "$img")
              echo "- $filename: ${size} bytes" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "### ❌ SNS画像: 生成されていません" >> $GITHUB_STEP_SUMMARY
        fi
        
        # note記事の結果  
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -d "build/note" ]; then
          echo "### 📝 note記事" >> $GITHUB_STEP_SUMMARY
          note_count=$(find build/note -name "*.md" | wc -l)
          echo "- 生成記事数: ${note_count}件" >> $GITHUB_STEP_SUMMARY
          
          for note in build/note/*.md; do
            if [ -f "$note" ]; then
              filename=$(basename "$note")
              chars=$(wc -c < "$note")
              echo "- $filename: ${chars} 文字" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "### ❌ note記事: 生成されていません" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 保存場所の情報
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 💾 保存場所" >> $GITHUB_STEP_SUMMARY
        echo "生成されたSNSコンテンツは以下の場所に保存されました:" >> $GITHUB_STEP_SUMMARY
        echo "- \`public/preview/social/\` - SNS画像" >> $GITHUB_STEP_SUMMARY
        echo "- \`public/preview/note/\` - note記事" >> $GITHUB_STEP_SUMMARY  
        echo "- \`public/preview/logs/\` - 生成ログ" >> $GITHUB_STEP_SUMMARY
        echo "- \`public/preview/index.html\` - プレビューページ" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "⚠️ **重要**: プレビューを表示するにはメインワークフローを実行してください" >> $GITHUB_STEP_SUMMARY
        echo "- データソース: ${{ github.event.inputs.test_mode == 'demo' && 'デモデータ' || 'data/articles.json' }}" >> $GITHUB_STEP_SUMMARY
        echo "- テストモード: ${{ github.event.inputs.test_mode || 'database' }}" >> $GITHUB_STEP_SUMMARY
        echo "- LLM最適化: ${{ github.event.inputs.enable_llm || 'true' }}" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📁 保存されたファイル構造" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        tree public/preview/ || find public/preview -type f | head -20
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY