name: Test Google Docs Podcast System

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (テストモード)'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
      data_source:
        description: 'Data source (データソース)'
        required: true
        default: 'google_document'
        type: choice
        options:
        - 'google_document'
        - 'database'

jobs:
  test-gdocs-podcast:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        echo "System dependencies installed"

    - name: Test Google Docs Podcast System
      env:
        # データソース設定
        PODCAST_DATA_SOURCE: ${{ github.event.inputs.data_source }}
        
        # Google認証設定
        GOOGLE_AUTH_METHOD: 'oauth2'
        GOOGLE_OVERWRITE_DOC_ID: ${{ secrets.GOOGLE_OVERWRITE_DOC_ID }}
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        
        # AI設定
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GEMINI_PODCAST_MODEL: 'gemini-2.5-pro-001'
        
        # ポッドキャスト設定
        PODCAST_PRODUCTION_MODE: 'false'
        PODCAST_TARGET_DURATION_MINUTES: '10.0'
        PODCAST_TARGET_SCRIPT_CHARS: '2700'
        ENABLE_PODCAST_GENERATION: 'true'
        
        # LINE設定（オプション）
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
        
        # RSS設定（オプション）
        PODCAST_RSS_BASE_URL: ${{ secrets.PODCAST_RSS_BASE_URL }}
        PODCAST_AUTHOR_NAME: ${{ secrets.PODCAST_AUTHOR_NAME }}
        PODCAST_AUTHOR_EMAIL: ${{ secrets.PODCAST_AUTHOR_EMAIL }}
      
      run: |
        echo "🧪 Googleドキュメント連携ポッドキャストシステム テスト開始"
        echo "データソース: ${{ github.event.inputs.data_source }}"
        echo "テストモード: ${{ github.event.inputs.test_mode }}"
        echo ""
        
        # テスト実行
        if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
          echo "📋 テストモードでの実行"
          python test_production_podcast_with_gdocs.py <<< "1"
        else
          echo "🚀 プロダクションモードでの実行"
          python test_production_podcast_with_gdocs.py <<< "2"
        fi

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: podcast-test-logs
        path: |
          logs/*.log
          logs/*.txt
        retention-days: 7

    - name: Create test results summary
      if: always()
      run: |
        echo "## 📊 テスト結果サマリー" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **データソース**: ${{ github.event.inputs.data_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **テストモード**: ${{ github.event.inputs.test_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "- **実行時刻**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **ワークフロー実行ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ $? -eq 0 ]]; then
          echo "✅ **テスト結果**: 成功" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **テスト結果**: 失敗" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 ログファイル" >> $GITHUB_STEP_SUMMARY
        if [ -d "logs" ]; then
          ls -la logs/ >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "ログファイルなし" >> $GITHUB_STEP_SUMMARY
        else
          echo "ログディレクトリなし" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment on commit
      if: always() && github.event_name == 'workflow_dispatch'
      uses: peter-evans/commit-comment@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## 🧪 Googleドキュメント連携ポッドキャストテスト結果
          
          **データソース**: ${{ github.event.inputs.data_source }}
          **テストモード**: ${{ github.event.inputs.test_mode }}
          **結果**: ${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}
          **実行時刻**: ${{ github.event.head_commit.timestamp }}
          
          [📊 詳細ログを確認](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

    - name: Create Issue on Failure
      if: failure()
      uses: peter-evans/create-issue-or-comment@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.issue.number }}
        title: "🔧 Googleドキュメント連携ポッドキャストテスト失敗 #${{ github.run_number }}"
        body: |
          ## 📋 テスト失敗詳細
          
          **ワークフロー**: Test Google Docs Podcast System
          **実行番号**: #${{ github.run_number }}
          **データソース**: ${{ github.event.inputs.data_source }}
          **テストモード**: ${{ github.event.inputs.test_mode }}
          **失敗時刻**: ${{ github.event.head_commit.timestamp }}
          
          ### 🔗 リンク
          - [📊 失敗したワークフロー](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [📝 コミット](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ### 🛠️ 対応方法
          1. ワークフローログでエラー詳細を確認
          2. 必要な環境変数が設定されているか確認
          3. Googleドキュメントアクセス権限を確認
          4. 修正後、手動で再実行
          
          ### 📊 環境情報
          - Python: 3.11
          - OS: ubuntu-latest
          - Gemini API: ${{ env.GEMINI_API_KEY != '' && '✅ 設定済み' || '❌ 未設定' }}
          - Google認証: ${{ env.GOOGLE_OAUTH2_CLIENT_ID != '' && '✅ 設定済み' || '❌ 未設定' }}