name: 7-Prompt Pattern Comparison Test

on:
  workflow_dispatch:
    inputs:
      data_source:
        description: 'Data source (データソース)'
        required: true
        default: 'database'
        type: choice
        options:
        - 'database'
        - 'google_document'
      target_articles:
        description: 'Number of target articles (対象記事数)'
        required: true
        default: '15'
        type: string
      skip_audio:
        description: 'Skip audio generation (音声生成をスキップ)'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
      generate_gdoc:
        description: 'Generate Google Document report (Googleドキュメントレポート生成)'
        required: true
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  prompt-pattern-comparison:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        echo "System dependencies installed"

    - name: Create directories
      run: |
        mkdir -p logs
        mkdir -p prompt_comparison_results
        echo "Directories created"

    - name: 7-Prompt Pattern Comparison Test
      env:
        # データソース設定
        PODCAST_DATA_SOURCE: ${{ github.event.inputs.data_source }}
        COMPARISON_TARGET_ARTICLES: ${{ github.event.inputs.target_articles }}
        
        # Google認証設定（Googleドキュメント出力用）
        GOOGLE_AUTH_METHOD: 'oauth2'
        GOOGLE_OVERWRITE_DOC_ID: ${{ secrets.GOOGLE_OVERWRITE_DOC_ID }}
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        
        # AI設定
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GEMINI_PODCAST_MODEL: 'gemini-2.5-pro'
        
        # ポッドキャスト設定
        PODCAST_PRODUCTION_MODE: 'false'
        PODCAST_TARGET_DURATION_MINUTES: '10.0'
        PODCAST_TARGET_SCRIPT_CHARS: '2700'
        ENABLE_PODCAST_GENERATION: ${{ github.event.inputs.skip_audio == 'false' }}
        
        # 比較システム設定
        SKIP_AUDIO_GENERATION: ${{ github.event.inputs.skip_audio }}
        GENERATE_GOOGLE_DOCUMENT: ${{ github.event.inputs.generate_gdoc }}
        
        # データベース設定（必要に応じて）
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        
      run: |
        echo "🔍 7プロンプトパターン一括比較テスト開始"
        echo "データソース: ${{ github.event.inputs.data_source }}"
        echo "対象記事数: ${{ github.event.inputs.target_articles }}"
        echo "音声生成スキップ: ${{ github.event.inputs.skip_audio }}"
        echo "Googleドキュメント生成: ${{ github.event.inputs.generate_gdoc }}"
        echo ""
        
        # 比較システム実行
        python prompt_pattern_comparison_runner.py

    - name: Upload comparison results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: prompt-comparison-results-${{ github.run_number }}
        path: |
          prompt_comparison_results/*.json
          logs/*.log
          logs/*.txt
        retention-days: 30

    - name: Parse comparison results
      if: always()
      id: parse_results
      run: |
        echo "Parsing comparison results..."
        
        # 最新の比較結果ファイルを取得
        LATEST_RESULT=$(ls -t prompt_comparison_results/*.json 2>/dev/null | head -n 1 || echo "")
        
        if [ -n "$LATEST_RESULT" ] && [ -f "$LATEST_RESULT" ]; then
          echo "Found result file: $LATEST_RESULT"
          
          # JSONから主要な結果を抽出
          COMPARISON_ID=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); print(data.get('comparison_id', 'N/A'))")
          TOTAL_TIME=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); print(f\"{data.get('total_execution_time_seconds', 0):.1f}\")")
          ARTICLES_COUNT=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); print(data.get('articles_metadata', {}).get('total_articles', 0))")
          
          # 成功・失敗パターン数
          SUCCESSFUL_PATTERNS=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); analysis=data.get('comparison_results', {}).get('comparison_analysis', {}); print(analysis.get('successful_patterns', 0))")
          FAILED_PATTERNS=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); analysis=data.get('comparison_results', {}).get('comparison_analysis', {}); print(analysis.get('failed_patterns', 0))")
          
          # 最優秀パターン
          BEST_PATTERN=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); analysis=data.get('comparison_results', {}).get('comparison_analysis', {}); best=analysis.get('best_pattern', {}); print(best.get('pattern', 'N/A'))")
          BEST_SCORE=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); analysis=data.get('comparison_results', {}).get('comparison_analysis', {}); best=analysis.get('best_pattern', {}); print(f\"{best.get('score', 0):.3f}\")")
          
          # Googleドキュメント結果
          GDOC_URL=$(python -c "import json; data=json.load(open('$LATEST_RESULT')); gdoc=data.get('google_document', {}); print(gdoc.get('document_url', 'N/A'))")
          
          # 環境変数に設定
          echo "comparison_id=$COMPARISON_ID" >> $GITHUB_OUTPUT
          echo "total_time=$TOTAL_TIME" >> $GITHUB_OUTPUT
          echo "articles_count=$ARTICLES_COUNT" >> $GITHUB_OUTPUT
          echo "successful_patterns=$SUCCESSFUL_PATTERNS" >> $GITHUB_OUTPUT
          echo "failed_patterns=$FAILED_PATTERNS" >> $GITHUB_OUTPUT
          echo "best_pattern=$BEST_PATTERN" >> $GITHUB_OUTPUT
          echo "best_score=$BEST_SCORE" >> $GITHUB_OUTPUT
          echo "gdoc_url=$GDOC_URL" >> $GITHUB_OUTPUT
          echo "has_results=true" >> $GITHUB_OUTPUT
          
        else
          echo "No comparison results found"
          echo "has_results=false" >> $GITHUB_OUTPUT
        fi

    - name: Create test results summary
      if: always()
      run: |
        echo "## 🔍 7プロンプトパターン一括比較テスト結果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 実行設定
        echo "### 📋 実行設定" >> $GITHUB_STEP_SUMMARY
        echo "- **データソース**: ${{ github.event.inputs.data_source }}" >> $GITHUB_STEP_SUMMARY
        echo "- **対象記事数**: ${{ github.event.inputs.target_articles }}記事" >> $GITHUB_STEP_SUMMARY
        echo "- **音声生成**: ${{ github.event.inputs.skip_audio == 'true' && 'スキップ' || '実行' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Googleドキュメント**: ${{ github.event.inputs.generate_gdoc == 'true' && '生成' || 'スキップ' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **実行時刻**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **ワークフロー実行ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 実行結果
        if [[ "${{ steps.parse_results.outputs.has_results }}" == "true" ]]; then
          echo "### 📊 実行結果" >> $GITHUB_STEP_SUMMARY
          echo "- **比較ID**: ${{ steps.parse_results.outputs.comparison_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **総実行時間**: ${{ steps.parse_results.outputs.total_time }}秒" >> $GITHUB_STEP_SUMMARY
          echo "- **対象記事数**: ${{ steps.parse_results.outputs.articles_count }}記事" >> $GITHUB_STEP_SUMMARY
          echo "- **成功パターン**: ${{ steps.parse_results.outputs.successful_patterns }}個" >> $GITHUB_STEP_SUMMARY
          echo "- **失敗パターン**: ${{ steps.parse_results.outputs.failed_patterns }}個" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.parse_results.outputs.successful_patterns }}" != "0" ]]; then
            echo "### 🏆 最優秀パターン" >> $GITHUB_STEP_SUMMARY
            echo "- **パターン**: ${{ steps.parse_results.outputs.best_pattern }}" >> $GITHUB_STEP_SUMMARY
            echo "- **総合スコア**: ${{ steps.parse_results.outputs.best_score }}/1.000" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ steps.parse_results.outputs.gdoc_url }}" != "N/A" ]]; then
            echo "### 📄 Googleドキュメントレポート" >> $GITHUB_STEP_SUMMARY
            echo "[📊 詳細比較レポートを表示](${{ steps.parse_results.outputs.gdoc_url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ $? -eq 0 ]]; then
            echo "✅ **テスト結果**: 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **テスト結果**: 失敗" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "### ❌ 実行結果" >> $GITHUB_STEP_SUMMARY
          echo "比較結果の解析に失敗しました。" >> $GITHUB_STEP_SUMMARY
          echo "詳細なエラー内容はワークフローログを確認してください。" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 成果物" >> $GITHUB_STEP_SUMMARY
        if [ -d "prompt_comparison_results" ]; then
          RESULT_COUNT=$(ls -1 prompt_comparison_results/*.json 2>/dev/null | wc -l)
          echo "- 比較結果ファイル: ${RESULT_COUNT}個" >> $GITHUB_STEP_SUMMARY
        fi
        if [ -d "logs" ]; then
          LOG_COUNT=$(ls -1 logs/*.log 2>/dev/null | wc -l)
          echo "- ログファイル: ${LOG_COUNT}個" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment on commit
      if: always() && github.event_name == 'workflow_dispatch'
      uses: peter-evans/commit-comment@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## 🔍 7プロンプトパターン一括比較テスト結果
          
          **データソース**: ${{ github.event.inputs.data_source }}
          **対象記事数**: ${{ github.event.inputs.target_articles }}記事
          **結果**: ${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}
          **実行時刻**: ${{ github.event.head_commit.timestamp }}
          
          ### 📊 実行結果サマリー
          ${{ steps.parse_results.outputs.has_results == 'true' && format('- **比較ID**: {0}', steps.parse_results.outputs.comparison_id) || '- 比較結果の取得に失敗' }}
          ${{ steps.parse_results.outputs.has_results == 'true' && format('- **実行時間**: {0}秒', steps.parse_results.outputs.total_time) || '' }}
          ${{ steps.parse_results.outputs.has_results == 'true' && format('- **成功パターン**: {0}個', steps.parse_results.outputs.successful_patterns) || '' }}
          ${{ steps.parse_results.outputs.has_results == 'true' && format('- **最優秀パターン**: {0} (スコア: {1})', steps.parse_results.outputs.best_pattern, steps.parse_results.outputs.best_score) || '' }}
          
          ${{ steps.parse_results.outputs.gdoc_url != 'N/A' && format('### 📄 [詳細レポート]({0})', steps.parse_results.outputs.gdoc_url) || '' }}
          
          [📊 詳細ログを確認](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

    - name: Create Issue on Failure
      if: failure()
      uses: peter-evans/create-issue-or-comment@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "🔧 7プロンプトパターン比較テスト失敗 #${{ github.run_number }}"
        body: |
          ## 📋 テスト失敗詳細
          
          **ワークフロー**: 7-Prompt Pattern Comparison Test
          **実行番号**: #${{ github.run_number }}
          **データソース**: ${{ github.event.inputs.data_source }}
          **対象記事数**: ${{ github.event.inputs.target_articles }}
          **失敗時刻**: ${{ github.event.head_commit.timestamp }}
          
          ### 🔗 リンク
          - [📊 失敗したワークフロー](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [📝 コミット](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          
          ### 🛠️ 対応方法
          1. ワークフローログでエラー詳細を確認
          2. 必要な環境変数が設定されているか確認
          3. プロンプトパターン設定ファイルを確認
          4. API制限やタイムアウトの可能性を確認
          5. 修正後、手動で再実行
          
          ### 📊 環境情報
          - Python: 3.11
          - OS: ubuntu-latest
          - Gemini API: ${{ env.GEMINI_API_KEY != '' && '✅ 設定済み' || '❌ 未設定' }}
          - Google認証: ${{ env.GOOGLE_OAUTH2_CLIENT_ID != '' && '✅ 設定済み' || '❌ 未設定' }}
          - データソース: ${{ github.event.inputs.data_source }}
          
          ### 🔍 確認項目
          - [ ] Gemini API Keyの有効性確認
          - [ ] Google認証情報の更新確認
          - [ ] プロンプトテンプレートファイルの存在確認
          - [ ] データソースアクセス権限確認
          - [ ] GitHub Actions実行時間制限の確認