name: Production Monitoring & Health Check

on:
  schedule:
    # 毎時0分、30分にヘルスチェック実行
    - cron: '0,30 * * * *'
  workflow_dispatch: # 手動実行を可能にする
    inputs:
      check_type:
        description: 'Type of health check to perform'
        required: false
        default: 'all'
        type: choice
        options:
        - 'basic'
        - 'advanced' 
        - 'performance'
        - 'all'
      alert_threshold:
        description: 'Alert threshold (seconds for response time)'
        required: false
        default: '10'
        type: string

jobs:
  health-check:
    name: Website Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Basic connectivity test
      id: basic-check
      run: |
        echo "🏥 基本ヘルスチェック開始"
        
        SITE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
        ALERT_THRESHOLD="${{ github.event.inputs.alert_threshold || '10' }}"
        
        # レスポンス時間測定
        START_TIME=$(date +%s.%N)
        HTTP_STATUS=$(curl -s -o /tmp/response.html -w "%{http_code}" --max-time 30 "$SITE_URL" || echo "000")
        END_TIME=$(date +%s.%N)
        
        RESPONSE_TIME=$(echo "$END_TIME - $START_TIME" | bc -l)
        RESPONSE_TIME_INT=$(echo "$RESPONSE_TIME" | cut -d. -f1)
        
        echo "サイトURL: $SITE_URL"
        echo "HTTPステータス: $HTTP_STATUS"
        echo "レスポンス時間: ${RESPONSE_TIME}秒"
        
        # 結果判定
        if [[ "$HTTP_STATUS" == "200" ]]; then
          echo "✅ サイトアクセス: 正常"
          echo "status=healthy" >> $GITHUB_OUTPUT
        elif [[ "$HTTP_STATUS" == "404" ]]; then
          echo "⚠️ サイトアクセス: 404エラー"
          echo "status=warning" >> $GITHUB_OUTPUT
        else
          echo "❌ サイトアクセス: 異常 (Status: $HTTP_STATUS)"
          echo "status=error" >> $GITHUB_OUTPUT
        fi
        
        # レスポンス時間チェック
        if (( $(echo "$RESPONSE_TIME_INT > $ALERT_THRESHOLD" | bc -l) )); then
          echo "⚠️ レスポンス時間警告: ${RESPONSE_TIME}秒 > ${ALERT_THRESHOLD}秒"
          echo "performance=slow" >> $GITHUB_OUTPUT
        else
          echo "✅ レスポンス時間: 正常"
          echo "performance=good" >> $GITHUB_OUTPUT
        fi
        
        echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
        echo "http_status=$HTTP_STATUS" >> $GITHUB_OUTPUT
        echo "site_url=$SITE_URL" >> $GITHUB_OUTPUT

    - name: Content validation
      if: steps.basic-check.outputs.http_status == '200'
      id: content-check
      run: |
        echo "📝 コンテンツ検証"
        
        if [ -f "/tmp/response.html" ]; then
          CONTENT=$(cat /tmp/response.html)
          
          # 基本的なHTML構造チェック
          if [[ "$CONTENT" == *"<html"* ]] && [[ "$CONTENT" == *"</html>"* ]]; then
            echo "✅ HTML構造: 正常"
            echo "html_valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ HTML構造: 異常"
            echo "html_valid=false" >> $GITHUB_OUTPUT
          fi
          
          # 期待されるコンテンツの存在確認
          EXPECTED_KEYWORDS=("マーケット" "Market" "News" "ニュース")
          FOUND_KEYWORDS=0
          
          for keyword in "${EXPECTED_KEYWORDS[@]}"; do
            if [[ "$CONTENT" == *"$keyword"* ]]; then
              echo "✅ キーワード発見: $keyword"
              ((FOUND_KEYWORDS++))
            fi
          done
          
          if [[ $FOUND_KEYWORDS -gt 0 ]]; then
            echo "✅ コンテンツ: 正常 ($FOUND_KEYWORDS/${#EXPECTED_KEYWORDS[@]} キーワード発見)"
            echo "content_valid=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ コンテンツ: 期待されるキーワードが見つかりません"
            echo "content_valid=false" >> $GITHUB_OUTPUT
          fi
          
          # ファイルサイズチェック
          CONTENT_SIZE=$(wc -c < /tmp/response.html)
          echo "コンテンツサイズ: ${CONTENT_SIZE}バイト"
          
          if [[ $CONTENT_SIZE -lt 100 ]]; then
            echo "⚠️ コンテンツサイズが小さすぎます"
            echo "size_warning=true" >> $GITHUB_OUTPUT
          else
            echo "✅ コンテンツサイズ: 正常"
            echo "size_warning=false" >> $GITHUB_OUTPUT
          fi
          
          echo "content_size=$CONTENT_SIZE" >> $GITHUB_OUTPUT
        else
          echo "❌ レスポンスファイルが見つかりません"
          echo "content_valid=false" >> $GITHUB_OUTPUT
        fi

    - name: Advanced performance check
      if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'all'
      id: performance-check
      run: |
        echo "⚡ パフォーマンステスト"
        
        SITE_URL="${{ steps.basic-check.outputs.site_url }}"
        
        # 複数回のレスポンス時間測定
        declare -a RESPONSE_TIMES
        TOTAL_TIME=0
        SUCCESSFUL_REQUESTS=0
        
        for i in {1..5}; do
          echo "テスト $i/5 実行中..."
          START_TIME=$(date +%s.%N)
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$SITE_URL" || echo "000")
          END_TIME=$(date +%s.%N)
          
          if [[ "$STATUS" == "200" ]]; then
            RESPONSE_TIME=$(echo "$END_TIME - $START_TIME" | bc -l)
            RESPONSE_TIMES[$i]=$RESPONSE_TIME
            TOTAL_TIME=$(echo "$TOTAL_TIME + $RESPONSE_TIME" | bc -l)
            ((SUCCESSFUL_REQUESTS++))
            echo "  テスト $i: ${RESPONSE_TIME}秒 (成功)"
          else
            echo "  テスト $i: 失敗 (Status: $STATUS)"
          fi
          
          sleep 2 # リクエスト間隔
        done
        
        if [[ $SUCCESSFUL_REQUESTS -gt 0 ]]; then
          AVERAGE_TIME=$(echo "scale=3; $TOTAL_TIME / $SUCCESSFUL_REQUESTS" | bc -l)
          SUCCESS_RATE=$(echo "scale=2; $SUCCESSFUL_REQUESTS * 100 / 5" | bc -l)
          
          echo "成功率: ${SUCCESS_RATE}%"
          echo "平均レスポンス時間: ${AVERAGE_TIME}秒"
          
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "average_response_time=$AVERAGE_TIME" >> $GITHUB_OUTPUT
          
          # パフォーマンス評価
          if (( $(echo "$SUCCESS_RATE >= 80" | bc -l) )) && (( $(echo "$AVERAGE_TIME <= 5" | bc -l) )); then
            echo "✅ パフォーマンス: 良好"
            echo "performance_status=good" >> $GITHUB_OUTPUT
          elif (( $(echo "$SUCCESS_RATE >= 60" | bc -l) )) && (( $(echo "$AVERAGE_TIME <= 10" | bc -l) )); then
            echo "⚠️ パフォーマンス: 注意"
            echo "performance_status=warning" >> $GITHUB_OUTPUT
          else
            echo "❌ パフォーマンス: 問題あり"
            echo "performance_status=critical" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ 全てのパフォーマンステストが失敗"
          echo "performance_status=critical" >> $GITHUB_OUTPUT
        fi

    - name: Generate health report
      id: health-report
      run: |
        echo "📊 ヘルスレポート生成"
        
        # 総合的なヘルススコア計算
        HEALTH_SCORE=100
        ISSUES=()
        
        # 基本チェック結果の評価
        if [[ "${{ steps.basic-check.outputs.status }}" != "healthy" ]]; then
          HEALTH_SCORE=$((HEALTH_SCORE - 50))
          ISSUES+=("サイトアクセス異常")
        fi
        
        if [[ "${{ steps.basic-check.outputs.performance }}" == "slow" ]]; then
          HEALTH_SCORE=$((HEALTH_SCORE - 20))
          ISSUES+=("レスポンス時間遅延")
        fi
        
        # コンテンツチェック結果の評価
        if [[ "${{ steps.content-check.outputs.content_valid }}" == "false" ]]; then
          HEALTH_SCORE=$((HEALTH_SCORE - 20))
          ISSUES+=("コンテンツ異常")
        fi
        
        if [[ "${{ steps.content-check.outputs.size_warning }}" == "true" ]]; then
          HEALTH_SCORE=$((HEALTH_SCORE - 10))
          ISSUES+=("コンテンツサイズ警告")
        fi
        
        # パフォーマンステスト結果の評価（該当する場合）
        PERF_STATUS="${{ steps.performance-check.outputs.performance_status }}"
        if [[ "$PERF_STATUS" == "critical" ]]; then
          HEALTH_SCORE=$((HEALTH_SCORE - 30))
          ISSUES+=("パフォーマンス重大問題")
        elif [[ "$PERF_STATUS" == "warning" ]]; then
          HEALTH_SCORE=$((HEALTH_SCORE - 15))
          ISSUES+=("パフォーマンス注意")
        fi
        
        # 最終判定
        if [[ $HEALTH_SCORE -ge 90 ]]; then
          OVERALL_STATUS="healthy"
          STATUS_EMOJI="✅"
          STATUS_TEXT="正常"
        elif [[ $HEALTH_SCORE -ge 70 ]]; then
          OVERALL_STATUS="warning"
          STATUS_EMOJI="⚠️"
          STATUS_TEXT="注意"
        else
          OVERALL_STATUS="critical"
          STATUS_EMOJI="❌"
          STATUS_TEXT="重大"
        fi
        
        echo "ヘルススコア: $HEALTH_SCORE/100"
        echo "総合ステータス: $STATUS_EMOJI $STATUS_TEXT"
        
        # 問題がある場合は詳細を出力
        if [[ ${#ISSUES[@]} -gt 0 ]]; then
          echo "検出された問題:"
          printf '  - %s\n' "${ISSUES[@]}"
        fi
        
        echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
        echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "status_text=$STATUS_TEXT" >> $GITHUB_OUTPUT
        echo "issues_count=${#ISSUES[@]}" >> $GITHUB_OUTPUT
        
        # レポートデータをJSON形式でも出力
        REPORT_JSON=$(cat << EOF
        {
          "timestamp": "$(date -Iseconds)",
          "site_url": "${{ steps.basic-check.outputs.site_url }}",
          "health_score": $HEALTH_SCORE,
          "overall_status": "$OVERALL_STATUS",
          "basic_check": {
            "http_status": "${{ steps.basic-check.outputs.http_status }}",
            "response_time": "${{ steps.basic-check.outputs.response_time }}",
            "status": "${{ steps.basic-check.outputs.status }}"
          },
          "content_check": {
            "html_valid": "${{ steps.content-check.outputs.html_valid }}",
            "content_valid": "${{ steps.content-check.outputs.content_valid }}",
            "content_size": "${{ steps.content-check.outputs.content_size }}"
          },
          "performance_check": {
            "success_rate": "${{ steps.performance-check.outputs.success_rate }}",
            "average_response_time": "${{ steps.performance-check.outputs.average_response_time }}",
            "status": "$PERF_STATUS"
          },
          "issues": $(printf '%s\n' "${ISSUES[@]}" | jq -R . | jq -s .)
        }
        EOF
        )
        
        echo "$REPORT_JSON" > health-report.json
        echo "✅ ヘルスレポート生成完了"

    - name: Upload health report
      uses: actions/upload-artifact@v4
      with:
        name: health-report-${{ github.run_id }}
        path: health-report.json
        retention-days: 30

    - name: Create issue for critical problems
      if: steps.health-report.outputs.overall_status == 'critical'
      uses: actions/github-script@v7
      with:
        script: |
          const healthScore = "${{ steps.health-report.outputs.health_score }}";
          const issuesCount = "${{ steps.health-report.outputs.issues_count }}";
          const siteUrl = "${{ steps.basic-check.outputs.site_url }}";
          const timestamp = new Date().toLocaleString('ja-JP');
          
          const title = `🚨 本番サイト重大問題検出 (スコア: ${healthScore}/100)`;
          
          const body = `## 🚨 本番サイトヘルスチェック: 重大問題
          
          **検出時刻**: ${timestamp}
          **サイトURL**: ${siteUrl}
          **ヘルススコア**: ${healthScore}/100
          **問題数**: ${issuesCount}件
          
          ### 📊 詳細診断結果
          
          | 項目 | 状態 | 詳細 |
          |------|------|------|
          | HTTPアクセス | ${{ steps.basic-check.outputs.status == 'healthy' ? '✅ 正常' : '❌ 異常' }} | ステータス: ${{ steps.basic-check.outputs.http_status }} |
          | レスポンス時間 | ${{ steps.basic-check.outputs.performance == 'good' ? '✅ 正常' : '⚠️ 遅延' }} | ${{ steps.basic-check.outputs.response_time }}秒 |
          | コンテンツ検証 | ${{ steps.content-check.outputs.content_valid == 'true' ? '✅ 正常' : '❌ 異常' }} | HTML: ${{ steps.content-check.outputs.html_valid }}, サイズ: ${{ steps.content-check.outputs.content_size }}バイト |
          
          ### 🔧 推奨対応
          
          1. **即座に確認**
             - [本番サイト](${siteUrl})へアクセスして状況確認
             - [GitHub Pages設定](https://github.com/${{ github.repository }}/settings/pages)の確認
          
          2. **調査手順**
             - 最近のデプロイメント履歴確認
             - GitHub Pagesの状態確認
             - DNSとネットワーク状況確認
          
          3. **復旧手順**
             - 問題に応じて最新の安定版を再デプロイ
             - 必要に応じてロールバック実行
          
          ### 📊 監視データ
          
          **実行ID**: ${{ github.run_id }}
          **ワークフロー**: [監視ログ確認](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **アーティファクト**: 詳細レポートをダウンロード可能
          
          ---
          
          🤖 **自動生成**: ${timestamp}
          ⚠️ **重要**: この問題は自動検出されました。手動確認と対応が必要です。`;
          
          // 既存の重大問題Issueをチェック
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['critical', 'monitoring', 'production'],
            state: 'open'
          });
          
          // 既存の問題がなければ新規Issue作成
          if (existingIssues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['critical', 'monitoring', 'production', 'bug']
            });
            console.log('重大問題のIssueを作成しました');
          } else {
            console.log('既存の重大問題Issueが存在するため、新規作成はスキップしました');
          }

    - name: Generate monitoring summary
      run: |
        echo "# 🏥 ヘルスチェック結果サマリー" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**実行時刻**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**サイトURL**: ${{ steps.basic-check.outputs.site_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 総合評価" >> $GITHUB_STEP_SUMMARY
        echo "**ヘルススコア**: ${{ steps.health-report.outputs.health_score }}/100" >> $GITHUB_STEP_SUMMARY
        echo "**ステータス**: ${{ steps.health-report.outputs.overall_status == 'healthy' && '✅ 正常' || steps.health-report.outputs.overall_status == 'warning' && '⚠️ 注意' || '❌ 重大問題' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔍 詳細結果" >> $GITHUB_STEP_SUMMARY
        echo "| 項目 | 結果 | 詳細 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
        echo "| HTTPアクセス | ${{ steps.basic-check.outputs.status == 'healthy' && '✅ 正常' || '❌ 異常' }} | ステータス: ${{ steps.basic-check.outputs.http_status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| レスポンス時間 | ${{ steps.basic-check.outputs.performance == 'good' && '✅ 正常' || '⚠️ 遅延' }} | ${{ steps.basic-check.outputs.response_time }}秒 |" >> $GITHUB_STEP_SUMMARY
        echo "| HTML構造 | ${{ steps.content-check.outputs.html_valid == 'true' && '✅ 正常' || '❌ 異常' }} | 妥当性確認 |" >> $GITHUB_STEP_SUMMARY
        echo "| コンテンツ | ${{ steps.content-check.outputs.content_valid == 'true' && '✅ 正常' || '❌ 異常' }} | キーワード検証 |" >> $GITHUB_STEP_SUMMARY
        
        # パフォーマンステスト結果があれば追加
        PERF_STATUS="${{ steps.performance-check.outputs.performance_status }}"
        if [[ "$PERF_STATUS" != "" ]]; then
          echo "| パフォーマンス | ${{ steps.performance-check.outputs.performance_status == 'good' && '✅ 良好' || steps.performance-check.outputs.performance_status == 'warning' && '⚠️ 注意' || '❌ 問題' }} | 成功率: ${{ steps.performance-check.outputs.success_rate }}%, 平均: ${{ steps.performance-check.outputs.average_response_time }}秒 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ steps.health-report.outputs.issues_count }}" != "0" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚠️ 検出された問題" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.health-report.outputs.issues_count }}件の問題が検出されました。詳細はワークフローログを確認してください。" >> $GITHUB_STEP_SUMMARY
        fi

  # RSS・ポッドキャスト配信のヘルスチェック
  podcast-health-check:
    name: Podcast & RSS Health Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'advanced' || github.event.inputs.check_type == 'all'
    
    steps:
    - name: Check RSS feed
      run: |
        echo "🎙️ ポッドキャストRSSヘルスチェック"
        
        RSS_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/podcast/feed.xml"
        
        # RSS フィードの存在確認
        RSS_STATUS=$(curl -s -o /tmp/rss.xml -w "%{http_code}" --max-time 10 "$RSS_URL" || echo "000")
        
        if [[ "$RSS_STATUS" == "200" ]]; then
          echo "✅ RSSフィード: アクセス可能"
          
          # RSS内容の基本検証
          if [ -f "/tmp/rss.xml" ]; then
            RSS_CONTENT=$(cat /tmp/rss.xml)
            
            if [[ "$RSS_CONTENT" == *"<rss"* ]] && [[ "$RSS_CONTENT" == *"</rss>"* ]]; then
              echo "✅ RSS形式: 正常"
            else
              echo "⚠️ RSS形式: 異常の可能性"
            fi
            
            # エピソード数カウント
            EPISODE_COUNT=$(echo "$RSS_CONTENT" | grep -c "<item>" || echo "0")
            echo "📊 エピソード数: $EPISODE_COUNT"
            
            if [[ $EPISODE_COUNT -gt 0 ]]; then
              echo "✅ エピソード: 利用可能"
            else
              echo "⚠️ エピソード: エピソードが見つかりません"
            fi
          fi
        elif [[ "$RSS_STATUS" == "404" ]]; then
          echo "⚠️ RSSフィード: 見つかりません（ポッドキャスト機能が無効の可能性）"
        else
          echo "❌ RSSフィード: アクセスエラー (Status: $RSS_STATUS)"
        fi

    - name: Check podcast directory
      run: |
        echo "📁 ポッドキャストディレクトリ確認"
        
        PODCAST_DIR_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/podcast/"
        
        PODCAST_STATUS=$(curl -s -o /tmp/podcast_dir.html -w "%{http_code}" --max-time 10 "$PODCAST_DIR_URL" || echo "000")
        
        if [[ "$PODCAST_STATUS" == "200" ]]; then
          echo "✅ ポッドキャストディレクトリ: アクセス可能"
        else
          echo "⚠️ ポッドキャストディレクトリ: Status $PODCAST_STATUS"
        fi