name: Social Content Integration

on:
  # ÊØéÊó•: „É°„Ç§„É≥Âá¶ÁêÜ(22:00 UTC)ÂÆå‰∫ÜÂæå„Å´ÂÆüË°å„Åô„ÇãÊÉ≥ÂÆö
  schedule:
    - cron: '40 22 * * *' # JST 7:40ÔºàUTC 22:40Ôºâ
    # ËøΩÂä†„ÅÆÊû†ÔºàÂøÖË¶ÅÊôÇ„Å´ÊúâÂäπÂåñÔºâ
    # - cron: '30 03 * * 1-5' # JST 12:30ÔºàÂπ≥Êó•Ôºâ
    # - cron: '00 09 * * 1-5' # JST 18:00ÔºàÂπ≥Êó•Ôºâ
  workflow_dispatch:
    inputs:
      use_db_artifact:
        description: 'Use database artifact from main workflow'
        required: false
        default: 'true'
        type: choice
        options: ['true','false']
      dry_run:
        description: 'ÁîªÂÉè/noteÁîüÊàê„ÅÆ„ÅøÔºàÈÖç‰ø°„Å™„ÅóÔºâ'
        required: false
        default: 'true'
        type: choice
        options: ['true','false']

jobs:
  social-content:
    # ÊâãÂãïÂÆüË°å„ÅØÂ∏∏„Å´Ë®±ÂèØ„ÄÅ„Çπ„Ç±„Ç∏„É•„Éº„É´ÂÆüË°å„ÅØENABLE_SOCIAL_AUTORUNÂ§âÊï∞„ÅßÂà∂Âæ°
    # ÊòéÁ§∫ÁöÑ„Å™‰æùÂ≠òÈñ¢‰øÇ„Å™„ÅóÔºàËá™Á´ãÂÆüË°åÂèØËÉΩÔºâ
    if: ${{ github.event_name == 'workflow_dispatch' || vars.ENABLE_SOCIAL_AUTORUN == 'true' || vars.ENABLE_SOCIAL_AUTORUN == '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt
          /var/lib/apt
        key: ${{ runner.os }}-apt-social-${{ hashFiles('.github/workflows/social-content.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-social-

    - name: Install system dependencies
      run: |
        sudo apt-get update -qq --fix-missing || true
        sudo apt-get install -y --no-install-recommends \
          sqlite3 \
          fonts-noto-cjk fonts-ipafont-gothic fonts-ipafont-mincho \
        || echo "‚ö†Ô∏è Some system packages failed but continuing..."

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip --quiet
        pip install -r requirements.txt --quiet --no-warn-script-location

    - name: Check main workflow status
      id: check-main-workflow
      run: |
        echo "üîç Checking main workflow status..."
        # Get the latest successful run of the main workflow
        response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/workflows/main.yml/runs?status=success&per_page=1")

        # Check if response contains workflow_runs array (simple grep-based check)
        if echo "$response" | grep -q '"workflow_runs"'; then
          echo "‚úÖ Found successful main workflow runs"
          echo "main_workflow_success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è No successful main workflow run found"
          echo "main_workflow_success=false" >> $GITHUB_OUTPUT
        fi

    - name: Download database artifact (from main workflow)
      id: download-artifact
      if: |
        github.event_name == 'schedule' ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.use_db_artifact == 'true')
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: market-news-db
        path: .
        repository: ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate database file
      id: validate-db
      run: |
        if [ -f "market_news.db" ]; then
          if sqlite3 market_news.db ".tables" > /dev/null 2>&1; then
            echo "db_valid=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Database file is valid and ready"
          else
            echo "db_valid=false" >> $GITHUB_OUTPUT
            echo "‚ùå Database file is corrupted"
            rm -f market_news.db
          fi
        else
          echo "db_valid=false" >> $GITHUB_OUTPUT
          echo "‚ùå Database file not found"
        fi

    - name: Create fallback database (if artifact download failed)
      id: create-fallback-db
      if: steps.validate-db.outputs.db_valid == 'false'
      run: |
        echo "üîÑ Creating fallback database..."
        echo "Artifact download status: ${{ steps.download-artifact.outcome }}"
        
        # Create a minimal database with sample data
        sqlite3 market_news.db "
        CREATE TABLE IF NOT EXISTS articles (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          url TEXT UNIQUE,
          url_hash TEXT,
          title TEXT,
          body TEXT,
          source TEXT,
          category TEXT,
          published_at DATETIME,
          scraped_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          content_hash TEXT
        );
        
        INSERT OR IGNORE INTO articles (title, body, source, published_at, url, url_hash, category, content_hash) VALUES 
        ('Market Analysis Update', 'Today''s market shows mixed signals with central bank policies taking center stage.', 'Reuters', datetime('now', '-1 hour'), 'https://example.com/market-analysis-1', 'hash1', 'market', 'content_hash1'),
        ('Economic Indicators Review', 'Key economic indicators suggest continued uncertainty in global markets.', 'Bloomberg', datetime('now', '-2 hours'), 'https://example.com/economic-indicators-1', 'hash2', 'economy', 'content_hash2'),
        ('Policy Updates', 'Central bank communications indicate potential shifts in monetary policy direction.', 'Reuters', datetime('now', '-3 hours'), 'https://example.com/policy-updates-1', 'hash3', 'policy', 'content_hash3');
        "
        
        if sqlite3 market_news.db ".tables" > /dev/null 2>&1; then
          echo "db_valid=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Fallback database created successfully"
        else
          echo "db_valid=false" >> $GITHUB_OUTPUT
          echo "‚ùå Failed to create fallback database"
        fi

    - name: Generate fresh database (alternative fallback)
      id: generate-fresh-db
      if: |
        steps.validate-db.outputs.db_valid == 'false' &&
        steps.create-fallback-db.outputs.db_valid == 'false'
      timeout-minutes: 10
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        GOOGLE_AUTH_METHOD: service_account
      run: |
        echo "üîÑ Attempting to generate fresh database..."
        
        # Try lightweight scraping to generate database
        python scripts/core/main.py || {
          echo "‚ö†Ô∏è Lightweight scraping failed, using emergency fallback"
          
          # Emergency fallback with more comprehensive sample data
          sqlite3 market_news.db "
          CREATE TABLE IF NOT EXISTS articles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            url TEXT UNIQUE,
            url_hash TEXT,
            title TEXT,
            body TEXT,
            source TEXT,
            category TEXT,
            published_at DATETIME,
            scraped_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            content_hash TEXT
          );
          
          INSERT OR IGNORE INTO articles (title, body, source, published_at, url, url_hash, category, content_hash) VALUES 
          ('Fed Signals Potential Rate Cuts Amid Economic Uncertainty', 'The Federal Reserve is considering interest rate reductions as economic indicators show mixed signals. Market analysts suggest this could signal a shift in monetary policy direction.', 'Reuters', datetime('now', '-30 minutes'), 'https://example.com/fed-rate-cuts-1', 'fed_hash1', 'monetary', 'fed_content_hash1'),
          ('ECB Officials Divided on Interest Rate Strategy', 'European Central Bank policymakers are showing diverging views on future interest rate decisions. Some officials suggest easing monetary policy while others advocate for continued restraint.', 'Bloomberg', datetime('now', '-1 hour'), 'https://example.com/ecb-division-1', 'ecb_hash1', 'monetary', 'ecb_content_hash1'),
          ('G7 Considers Enhanced Sanctions on Energy Imports', 'Finance ministers from G7 nations are discussing additional sanctions targeting countries purchasing Russian energy products. The move aims to strengthen economic pressure.', 'Reuters', datetime('now', '-2 hours'), 'https://example.com/g7-sanctions-1', 'g7_hash1', 'policy', 'g7_content_hash1'),
          ('Market Volatility Increases Amid Policy Uncertainty', 'Global markets are experiencing heightened volatility as investors weigh conflicting signals from central banks and geopolitical developments.', 'Reuters', datetime('now', '-3 hours'), 'https://example.com/market-volatility-1', 'volatility_hash1', 'market', 'volatility_content_hash1'),
          ('Inflation Data Shows Mixed Signals Across Regions', 'Latest inflation figures reveal varying trends across different economic regions, complicating central bank policy decisions.', 'Bloomberg', datetime('now', '-4 hours'), 'https://example.com/inflation-mixed-1', 'inflation_hash1', 'economy', 'inflation_content_hash1');
          "
        }
        
        if sqlite3 market_news.db ".tables" > /dev/null 2>&1; then
          echo "db_valid=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Fresh database generation completed"
        else
          echo "db_valid=false" >> $GITHUB_OUTPUT
          echo "‚ùå All database generation methods failed"
        fi

    - name: Run social content generation (DB-based)
      id: generate-content
      timeout-minutes: 25
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        GOOGLE_AUTH_METHOD: service_account
      run: |
        echo "üöÄ Generating social assets from DB"
        echo "Google Auth Method: $GOOGLE_AUTH_METHOD"
        echo "Database source: ${{ steps.validate-db.outputs.db_valid == 'true' && 'Artifact' || steps.create-fallback-db.outputs.db_valid == 'true' && 'Fallback' || steps.generate-fresh-db.outputs.db_valid == 'true' && 'Fresh Generation' || 'Unknown' }}"
        
        # Run content generation with error handling
        if python3 scripts/dev/generate_from_db.py; then
          echo "content_generated=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Social content generation completed successfully"
        else
          echo "content_generated=false" >> $GITHUB_OUTPUT
          echo "‚ùå Social content generation failed or timed out"
          exit 1
        fi

    - name: Upload social artifacts
      uses: actions/upload-artifact@v4
      with:
        name: social-content
        path: |
          build/social/**
          build/note/**
        if-no-files-found: warn
        retention-days: 5

    - name: Enhanced error handling and summary
      if: always()
      run: |
        echo "## üìä Social Content Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Workflow Status**: ${{ steps.check-main-workflow.outputs.main_workflow_success || 'unknown' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **DB Valid**: ${{ steps.validate-db.outputs.db_valid || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Download**: ${{ steps.download-artifact.outcome || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Fallback DB Created**: ${{ steps.create-fallback-db.outputs.db_valid || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Fresh DB Generated**: ${{ steps.generate-fresh-db.outputs.db_valid || 'false' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Content Generated**: ${{ steps.generate-content.outputs.content_generated || 'false' }}" >> $GITHUB_STEP_SUMMARY
        
        # Error analysis
        if [ "${{ job.status }}" = "failure" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üî¥ Error Analysis" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-main-workflow.outputs.main_workflow_success }}" = "false" ]; then
            echo "- ‚ùå **Main Workflow Failed**: No successful main workflow run found - check main.yml" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.download-artifact.outcome }}" = "failure" ]; then
            echo "- ‚ùå **Artifact Download Failed**: market-news-db not found" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.validate-db.outputs.db_valid }}" = "false" ]; then
            echo "- ‚ùå **Database Invalid**: Cannot proceed with content generation" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.create-fallback-db.outputs.db_valid }}" = "false" ]; then
            echo "- ‚ùå **Fallback Creation Failed**: No database available" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Success details
        if [ "${{ job.status }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ‚úÖ Generation Results" >> $GITHUB_STEP_SUMMARY
          if [ -d build/social ]; then
            echo "### üñºÔ∏è Generated Images" >> $GITHUB_STEP_SUMMARY
            find build/social -type f -name "*.png" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || true
          fi
          if [ -d build/note ]; then
            echo "### üìù Generated Notes" >> $GITHUB_STEP_SUMMARY
            find build/note -type f -name "*.md" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || true
          fi
        fi
        
        # Recommendations
        if [ "${{ job.status }}" = "failure" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üí° Recommendations" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-main-workflow.outputs.main_workflow_success }}" = "false" ]; then
            echo "- üîß **Check Main Workflow**: Run main.yml workflow manually to generate database artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- üìÖ **Check Schedule**: Ensure main workflow runs at UTC 22:00 (JST 7:00)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- Ensure main workflow has run successfully before social content generation" >> $GITHUB_STEP_SUMMARY
          echo "- Check artifact retention settings (default: 90 days)" >> $GITHUB_STEP_SUMMARY
          echo "- Consider running main workflow manually if artifacts are missing" >> $GITHUB_STEP_SUMMARY
        fi

