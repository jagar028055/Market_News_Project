name: Market News Scraper

on:
  schedule:
    - cron: '0 22 * * *' # JST 7時
    - cron: '0 4,14 * * *' # JST 13時, 23時
  workflow_dispatch: # 手動実行を可能にする
    inputs:
      enable_podcast:
        description: 'Enable podcast generation'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # リポジトリへの書き込み権限を付与
      issues: write   # 失敗時Issue作成用

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' # プロジェクトで使用しているPythonのバージョン

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Clean up previous run artifacts
      run: |
        # 既存のHTMLファイルと公開ディレクトリを完全削除
        rm -f index.html
        rm -rf public/
        # 一時的なファイルやキャッシュも削除
        rm -f *.html
        rm -rf __pycache__/
        echo "Clean up completed - all previous artifacts removed"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg mecab mecab-ipadic-utf8 libmecab-dev
        echo "MeCab installation completed"
        mecab --version

    - name: Install Japanese fonts for WordCloud
      run: |
        sudo apt-get install -y fonts-noto-cjk fonts-ipafont-gothic fonts-ipafont-mincho
        echo "Japanese fonts installation completed"
        # フォント確認
        fc-list | grep -i "noto\|ipa" | head -5

    - name: Run script
      env:
        # Google認証設定 (OAuth2に固定)
        GOOGLE_AUTH_METHOD: 'oauth2'
        GOOGLE_DRIVE_OUTPUT_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_OUTPUT_FOLDER_ID }}
        GOOGLE_OVERWRITE_DOC_ID: ${{ secrets.GOOGLE_OVERWRITE_DOC_ID }}
        # OAuth2認証情報のみを設定（サービスアカウント変数は削除済み）
        GOOGLE_OAUTH2_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH2_CLIENT_ID }}
        GOOGLE_OAUTH2_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH2_CLIENT_SECRET }}
        GOOGLE_OAUTH2_REFRESH_TOKEN: ${{ secrets.GOOGLE_OAUTH2_REFRESH_TOKEN }}
        # AI設定
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        # ドキュメント生成制御
        FORCE_DOCUMENT_GENERATION: true
        # ポッドキャスト機能用環境変数
        ENABLE_PODCAST_GENERATION: ${{ github.event.inputs.enable_podcast || secrets.ENABLE_PODCAST_GENERATION }}
        LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
        LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
        PODCAST_RSS_BASE_URL: ${{ secrets.PODCAST_RSS_BASE_URL }}
        PODCAST_AUTHOR_NAME: ${{ secrets.PODCAST_AUTHOR_NAME }}
        PODCAST_AUTHOR_EMAIL: ${{ secrets.PODCAST_AUTHOR_EMAIL }}
        PODCAST_RSS_TITLE: ${{ secrets.PODCAST_RSS_TITLE || 'マーケットニュースポッドキャスト' }}
        PODCAST_RSS_DESCRIPTION: ${{ secrets.PODCAST_RSS_DESCRIPTION || 'AIが生成する毎日のマーケットニュース' }}
        PODCAST_MONTHLY_COST_LIMIT: ${{ secrets.PODCAST_MONTHLY_COST_LIMIT || '10.0' }}
        PODCAST_TARGET_DURATION_MINUTES: ${{ secrets.PODCAST_TARGET_DURATION_MINUTES || '10.0' }}
        PODCAST_MAX_FILE_SIZE_MB: ${{ secrets.PODCAST_MAX_FILE_SIZE_MB || '15' }}
      timeout-minutes: 20
      run: python main.py

    - name: Create public directory and copy files
      run: |
        mkdir -p public
        cp index.html public/
        cp -r assets public/
        # ポッドキャスト関連ファイルがあればコピー
        if [ -d "podcast" ]; then
          cp -r podcast public/
        fi

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v4.0.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        publish_branch: gh-pages # デプロイ用のブランチ
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'

    - name: Collect Error Information  
      if: failure()
      run: |
        echo "📊 エラー発生時の詳細情報収集"
        echo "WORKFLOW_ERROR_INFO<<EOF" >> $GITHUB_ENV
        echo "## 🔴 エラー発生時の詳細情報" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        echo "**失敗時刻**: $(date -u)" >> $GITHUB_ENV
        echo "**Ubuntu版**: $(lsb_release -d | cut -f2)" >> $GITHUB_ENV
        echo "**Python詳細**: $(python --version 2>&1)" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        echo "### 📦 インストール済み依存関係" >> $GITHUB_ENV
        pip list | grep -E "(requests|beautifulsoup|selenium|google|pandas)" >> $GITHUB_ENV || echo "関連パッケージなし" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        echo "### 🌐 主要サイト接続確認" >> $GITHUB_ENV
        for site in "https://www.reuters.com" "https://www.bloomberg.com" "https://generativelanguage.googleapis.com"; do
          curl -I -s --max-time 5 "$site" | head -1 >> $GITHUB_ENV || echo "$site: 接続失敗" >> $GITHUB_ENV
        done
        echo "EOF" >> $GITHUB_ENV

    - name: Create Issue on Failure
      if: failure() && github.event.pull_request == null
      uses: jayqi/failed-build-issue-action@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        title-template: "📰 マーケットニューススクレイパー失敗 #${{ github.run_number }} - ${{ github.workflow }}"
        body-template: |
          ## 📋 ワークフロー失敗詳細情報
          
          **ワークフロー**: ${{ github.workflow }}
          **実行番号**: #${{ github.run_number }}
          **実行者**: @${{ github.actor }}
          **トリガー**: ${{ github.event_name }}
          **ブランチ**: `${{ github.ref_name }}`
          **コミット**: `${{ github.sha }}` by @${{ github.event.head_commit.author.name }}
          **実行時刻**: ${{ github.event.head_commit.timestamp }}
          **実行ID**: ${{ github.run_id }}
          
          ### 🔗 重要なリンク
          - [📊 失敗したワークフロー実行](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [📝 コミット詳細](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - [🌿 ブランチ確認](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }})
          
          ### 🛠️ 環境・設定情報
          **ポッドキャスト有効**: `${{ github.event.inputs.enable_podcast || 'false' }}`
          **Python**: Ubuntu Latest (通常Python 3.x)
          **OS**: ubuntu-latest
          
          ### 🚨 API認証チェック
          **Gemini API**: ${{ env.GEMINI_API_KEY != '' && '✅ 設定済み' || '❌ 未設定' }}
          **LINE Bot**: ${{ env.LINE_CHANNEL_ACCESS_TOKEN != '' && '✅ 設定済み' || '❌ 未設定' }}
          **Google OAuth2**: ${{ env.GOOGLE_OAUTH2_CLIENT_ID != '' && '✅ 設定済み' || '❌ 未設定' }}
          
          ### 🎯 詳細診断・対応手順
          
          #### 1. エラーログ確認
          - [ ] [ワークフロー実行ページ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})でエラー詳細を確認
          - [ ] 失敗したステップを特定（通常は "Run main.py"）
          - [ ] エラーメッセージから原因を特定
          
          #### 2. スクレイピング・API確認
          - [ ] 対象サイト（Reuters、Bloomberg）のアクセス確認
          - [ ] Gemini API利用制限・認証確認
          - [ ] レート制限やIP制限の可能性確認
          - [ ] サイト構造変更の可能性確認
          
          #### 3. 依存関係・環境確認  
          - [ ] `requirements.txt` の依存関係が正しくインストールされているか確認
          - [ ] Selenium WebDriver の動作確認
          - [ ] ネットワーク接続・DNS解決確認
          
          #### 4. テスト・デバッグ実行
          ```bash
          # ローカル環境でのテスト
          python main.py
          
          # 接続テスト
          python -c "import requests; print(requests.get('https://httpbin.org/get').status_code)"
          
          # 特定サイトテスト
          curl -I https://www.reuters.com
          curl -I https://www.bloomberg.com
          
          # ワークフロー手動再実行
          gh workflow run "Market News Scraper"
          ```
          
          ### 🔍 よくある失敗原因
          
          | エラータイプ | 原因 | 解決方法 |
          |------------|------|----------|
          | **ScrapingError** | サイト構造変更・レート制限 | セレクター確認・間隔調整 |
          | **APIError** | Gemini制限・認証 | API設定・制限確認 |
          | **TimeoutError** | ネットワーク問題 | 再実行・タイムアウト調整 |
          | **ImportError** | 依存関係不足 | requirements.txt確認 |
          | **SeleniumError** | WebDriver問題 | ヘッドレス設定確認 |
          
          ### 📞 緊急時対応
          
          **即座に対応が必要な場合:**
          1. 手動でワークフロー再実行
          2. エラーログから具体的な原因特定  
          3. 必要に応じて依存関係更新
          4. プルリクエストで修正適用
          
          ${{ env.WORKFLOW_ERROR_INFO }}
          
          ---
          
          **🤖 自動生成時刻**: ${{ github.event.head_commit.timestamp }}  
          **📊 ワークフロー実行**: [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})  
          **🔧 解決後**: このIssueをクローズしてください
        label-name: "CI/CD"
        always-create-new-issue: false
