# -*- coding: utf-8 -*-

"""
LINE Flex Message „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê„ÇØ„É©„Çπ
„Éù„ÉÉ„Éâ„Ç≠„É£„Çπ„ÉàÈÄöÁü•Áî®„ÅÆ„É™„ÉÉ„ÉÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÊèê‰æõ
"""

from typing import Dict, List, Any, Optional
from datetime import datetime
import logging


class FlexMessageTemplates:
    """
    LINE Flex Message „ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê„ÇØ„É©„Çπ
    
    „Éù„ÉÉ„Éâ„Ç≠„É£„Çπ„ÉàÈÖç‰ø°ÈÄöÁü•Áî®„ÅÆ„É™„ÉÉ„ÉÅ„Å™„É°„ÉÉ„Çª„Éº„Ç∏„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁîüÊàê
    """
    
    def __init__(self, logger: logging.Logger):
        """
        ÂàùÊúüÂåñ
        
        Args:
            logger: „É≠„Ç¨„Éº
        """
        self.logger = logger
        
        # Ëâ≤Ë®≠ÂÆö
        self.colors = {
            'primary': '#1DB446',     # LINE Green
            'secondary': '#404040',   # Dark Gray
            'accent': '#FF6B00',      # Orange
            'text_primary': '#333333',
            'text_secondary': '#666666',
            'background': '#F8F8F8'
        }
        
        # „Ç¢„Ç§„Ç≥„É≥Ë®≠ÂÆöÔºàÁµµÊñáÂ≠óÔºâ
        self.icons = {
            'podcast': 'üéôÔ∏è',
            'calendar': 'üìÖ',
            'highlight': 'üìä',
            'time': '‚è±Ô∏è',
            'size': 'üíæ',
            'articles': 'üì∞',
            'listen': 'üéß',
            'rss': 'üì°',
            'play': '‚ñ∂Ô∏è',
            'download': '‚¨áÔ∏è'
        }
    
    def create_podcast_notification_flex(self, episode_info: Dict[str, Any], articles: List[Dict[str, Any]], audio_url: Optional[str] = None, rss_url: Optional[str] = None) -> Dict[str, Any]:
        """
        „Éù„ÉÉ„Éâ„Ç≠„É£„Çπ„ÉàÈÄöÁü•Áî®„ÅÆFlex Message„Çí‰ΩúÊàê
        
        Args:
            episode_info: „Ç®„Éî„ÇΩ„Éº„ÉâÊÉÖÂ†±
            articles: Ë®ò‰∫ã„Éá„Éº„Çø
            audio_url: Èü≥Â£∞„Éï„Ç°„Ç§„É´URL
            rss_url: RSS„Éï„Ç£„Éº„ÉâURL
            
        Returns:
            Dict[str, Any]: Flex Message „Éá„Éº„Çø
        """
        try:
            # Âü∫Êú¨ÊÉÖÂ†±„ÇíÂèñÂæó
            published_at = episode_info.get('published_at', datetime.now())
            file_size_mb = episode_info.get('file_size_mb', 0)
            article_count = episode_info.get('article_count', 0)
            
            # Êó•ÊôÇ„Éï„Ç©„Éº„Éû„ÉÉ„Éà
            if isinstance(published_at, datetime):
                date_str = published_at.strftime('%YÂπ¥%mÊúà%dÊó•')
                time_str = published_at.strftime('%H:%M')
            else:
                date_str = datetime.now().strftime('%YÂπ¥%mÊúà%dÊó•')
                time_str = datetime.now().strftime('%H:%M')
            
            # ÂÜçÁîüÊôÇÈñìÊé®ÂÆö
            duration_min = int(file_size_mb * 1.5) if file_size_mb > 0 else 5
            
            # „Éè„Ç§„É©„Ç§„Éà‰ΩúÊàê
            highlights = self._create_article_highlights(articles, max_highlights=3)
            
            # Flex MessageÊßãÁØâ
            flex_message = {
                "type": "flex",
                "altText": f"{self.icons['podcast']} „Éû„Éº„Ç±„ÉÉ„Éà„Éã„É•„Éº„Çπ„Éù„ÉÉ„Éâ„Ç≠„É£„Çπ„Éà {date_str}",
                "contents": {
                    "type": "bubble",
                    "size": "kilo",
                    "header": self._create_header(date_str, time_str),
                    "body": self._create_body(highlights, duration_min, file_size_mb, article_count),
                    "footer": self._create_footer(audio_url, rss_url),
                    "styles": self._create_styles()
                }
            }
            
            self.logger.info("Flex Message „ÉÜ„É≥„Éó„É¨„Éº„Éà‰ΩúÊàêÂÆå‰∫Ü")
            return flex_message
            
        except Exception as e:
            self.logger.error(f"Flex Message ‰ΩúÊàê„Ç®„É©„Éº: {e}")
            # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®„ÅÆ„Ç∑„É≥„Éó„É´„Å™„É°„ÉÉ„Çª„Éº„Ç∏
            return self._create_simple_fallback_message(episode_info, articles)
    
    def _create_header(self, date_str: str, time_str: str) -> Dict[str, Any]:
        """
        „Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ„Çí‰ΩúÊàê
        
        Args:
            date_str: Êó•‰ªòÊñáÂ≠óÂàó
            time_str: ÊôÇÂàªÊñáÂ≠óÂàó
            
        Returns:
            Dict[str, Any]: „Éò„ÉÉ„ÉÄ„ÉºÊßãÈÄ†
        """
        return {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"{self.icons['podcast']} „Éû„Éº„Ç±„ÉÉ„Éà„Éã„É•„Éº„Çπ",
                            "weight": "bold",
                            "size": "lg",
                            "color": "#FFFFFF",
                            "flex": 1
                        },
                        {
                            "type": "text",
                            "text": "PODCAST",
                            "size": "xs",
                            "color": "#FFFFFF",
                            "align": "end",
                            "weight": "bold"
                        }
                    ]
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                        {
                            "type": "text",
                            "text": f"{self.icons['calendar']} {date_str}",
                            "size": "sm",
                            "color": "#FFFFFF",
                            "opacity": 0.8
                        },
                        {
                            "type": "text",
                            "text": time_str,
                            "size": "sm",
                            "color": "#FFFFFF",
                            "align": "end",
                            "opacity": 0.8
                        }
                    ]
                }
            ],
            "backgroundColor": self.colors['primary'],
            "paddingAll": "15px",
            "spacing": "sm"
        }
    
    def _create_body(self, highlights: List[str], duration_min: int, file_size_mb: float, article_count: int) -> Dict[str, Any]:
        """
        „Éú„Éá„Ç£ÈÉ®ÂàÜ„Çí‰ΩúÊàê
        
        Args:
            highlights: „Éè„Ç§„É©„Ç§„Éà„É™„Çπ„Éà
            duration_min: ÂÜçÁîüÊôÇÈñìÔºàÂàÜÔºâ
            file_size_mb: „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫ÔºàMBÔºâ
            article_count: Ë®ò‰∫ãÊï∞
            
        Returns:
            Dict[str, Any]: „Éú„Éá„Ç£ÊßãÈÄ†
        """
        contents = [
            {
                "type": "text",
                "text": f"{self.icons['highlight']} Êú¨Êó•„ÅÆ„Éè„Ç§„É©„Ç§„Éà",
                "weight": "bold",
                "size": "md",
                "color": self.colors['text_primary'],
                "margin": "md"
            }
        ]
        
        # „Éè„Ç§„É©„Ç§„ÉàÈ†ÖÁõÆ„ÇíËøΩÂä†
        for highlight in highlights:
            contents.append({
                "type": "text",
                "text": f"‚Ä¢ {highlight}",
                "size": "sm",
                "color": self.colors['text_secondary'],
                "wrap": True,
                "margin": "sm"
            })
        
        # Áµ±Ë®àÊÉÖÂ†±
        contents.extend([
            {
                "type": "separator",
                "margin": "lg"
            },
            {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": f"{self.icons['time']} ÂÜçÁîüÊôÇÈñì",
                                "size": "xs",
                                "color": self.colors['text_secondary']
                            },
                            {
                                "type": "text",
                                "text": f"Á¥Ñ{duration_min}ÂàÜ",
                                "weight": "bold",
                                "size": "sm",
                                "color": self.colors['text_primary']
                            }
                        ],
                        "flex": 1
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": f"{self.icons['size']} „Çµ„Ç§„Ç∫",
                                "size": "xs",
                                "color": self.colors['text_secondary']
                            },
                            {
                                "type": "text",
                                "text": f"{file_size_mb:.1f}MB",
                                "weight": "bold",
                                "size": "sm",
                                "color": self.colors['text_primary']
                            }
                        ],
                        "flex": 1
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": f"{self.icons['articles']} Ë®ò‰∫ãÊï∞",
                                "size": "xs",
                                "color": self.colors['text_secondary']
                            },
                            {
                                "type": "text",
                                "text": f"{article_count}‰ª∂",
                                "weight": "bold",
                                "size": "sm",
                                "color": self.colors['text_primary']
                            }
                        ],
                        "flex": 1
                    }
                ],
                "spacing": "sm",
                "margin": "md"
            }
        ])
        
        return {
            "type": "box",
            "layout": "vertical",
            "contents": contents,
            "paddingAll": "15px"
        }
    
    def _create_footer(self, audio_url: Optional[str], rss_url: Optional[str]) -> Dict[str, Any]:
        """
        „Éï„ÉÉ„Çø„ÉºÈÉ®ÂàÜ„Çí‰ΩúÊàê
        
        Args:
            audio_url: Èü≥Â£∞„Éï„Ç°„Ç§„É´URL
            rss_url: RSS„Éï„Ç£„Éº„ÉâURL
            
        Returns:
            Dict[str, Any]: „Éï„ÉÉ„Çø„ÉºÊßãÈÄ†
        """
        buttons = []
        
        # ÂÜçÁîü„Éú„Çø„É≥ÔºàÈü≥Â£∞URL„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºâ
        if audio_url:
            buttons.append({
                "type": "button",
                "action": {
                    "type": "uri",
                    "label": f"{self.icons['play']} ÂÜçÁîü",
                    "uri": audio_url
                },
                "style": "primary",
                "color": self.colors['primary'],
                "flex": 2
            })
        
        # RSSË≥ºË™≠„Éú„Çø„É≥ÔºàRSSURL„Åå„ÅÇ„ÇãÂ†¥ÂêàÔºâ
        if rss_url:
            buttons.append({
                "type": "button",
                "action": {
                    "type": "uri",
                    "label": f"{self.icons['rss']} RSS",
                    "uri": rss_url
                },
                "style": "secondary",
                "flex": 1
            })
        
        # „Éá„Éï„Ç©„É´„Éà„Éú„Çø„É≥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÊÉÖÂ†±„Éú„Çø„É≥„ÇíËøΩÂä†
        if not buttons:
            buttons.append({
                "type": "button",
                "action": {
                    "type": "postback",
                    "label": f"{self.icons['listen']} Ë©≥Á¥∞ÊÉÖÂ†±",
                    "data": "action=podcast_info"
                },
                "style": "secondary"
            })
        
        return {
            "type": "box",
            "layout": "vertical",
            "contents": [
                {
                    "type": "separator"
                },
                {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": buttons,
                    "spacing": "sm",
                    "margin": "md"
                }
            ],
            "paddingAll": "15px"
        }
    
    def _create_styles(self) -> Dict[str, Any]:
        """
        „Çπ„Çø„Ç§„É´Ë®≠ÂÆö„Çí‰ΩúÊàê
        
        Returns:
            Dict[str, Any]: „Çπ„Çø„Ç§„É´ÊßãÈÄ†
        """
        return {
            "header": {
                "backgroundColor": self.colors['primary']
            },
            "body": {
                "backgroundColor": "#FFFFFF"
            },
            "footer": {
                "backgroundColor": "#FFFFFF"
            }
        }
    
    def _create_article_highlights(self, articles: List[Dict[str, Any]], max_highlights: int = 3) -> List[str]:
        """
        Ë®ò‰∫ã„ÅÆ„Éè„Ç§„É©„Ç§„Éà„Çí‰ΩúÊàê
        
        Args:
            articles: Ë®ò‰∫ã„Éá„Éº„Çø
            max_highlights: ÊúÄÂ§ß„Éè„Ç§„É©„Ç§„ÉàÊï∞
            
        Returns:
            List[str]: „Éè„Ç§„É©„Ç§„Éà„É™„Çπ„Éà
        """
        highlights = []
        
        # „Çª„É≥„ÉÅ„É°„É≥„ÉàÂà•„Å´Ë®ò‰∫ã„ÇíÂàÜÈ°û
        positive_articles = [a for a in articles if a.get('sentiment_label') == 'Positive']
        negative_articles = [a for a in articles if a.get('sentiment_label') == 'Negative']
        neutral_articles = [a for a in articles if a.get('sentiment_label') == 'Neutral']
        
        # ÂÑ™ÂÖàÈ†Ü‰Ωç: Positive > Negative > Neutral
        priority_articles = positive_articles + negative_articles + neutral_articles
        
        for article in priority_articles[:max_highlights]:
            title = article.get('title', '')
            if title:
                # „Çø„Ç§„Éà„É´„ÇíÁü≠Á∏ÆÔºà45ÊñáÂ≠ó‰ª•ÂÜÖÔºâ
                if len(title) > 45:
                    title = title[:42] + "..."
                highlights.append(title)
        
        # „Éè„Ç§„É©„Ç§„Éà„ÅåÂ∞ë„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        if not highlights:
            highlights = [
                "Â∏ÇÂ†¥ÂãïÂêë„ÅÆË©≥Á¥∞Ëß£Ë™¨",
                "ÊäïË≥áÂÆ∂Âêë„Åë„ÅÆÈáçË¶ÅÊÉÖÂ†±", 
                "ÁµåÊ∏à„Éã„É•„Éº„Çπ„ÅÆÂàÜÊûê"
            ][:max_highlights]
        
        return highlights
    
    def _create_simple_fallback_message(self, episode_info: Dict[str, Any], articles: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        „Ç®„É©„ÉºÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®„Ç∑„É≥„Éó„É´„É°„ÉÉ„Çª„Éº„Ç∏
        
        Args:
            episode_info: „Ç®„Éî„ÇΩ„Éº„ÉâÊÉÖÂ†±
            articles: Ë®ò‰∫ã„Éá„Éº„Çø
            
        Returns:
            Dict[str, Any]: „Ç∑„É≥„Éó„É´„Å™„ÉÜ„Ç≠„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏
        """
        published_at = episode_info.get('published_at', datetime.now())
        if isinstance(published_at, datetime):
            date_str = published_at.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M')
        else:
            date_str = datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M')
        
        message_text = f"{self.icons['podcast']} „Éû„Éº„Ç±„ÉÉ„Éà„Éã„É•„Éº„Çπ„Éù„ÉÉ„Éâ„Ç≠„É£„Çπ„Éà\n\n{self.icons['calendar']} {date_str} ÈÖç‰ø°\n\n{self.icons['listen']} Êú¨Êó•„ÅÆ„Éû„Éº„Ç±„ÉÉ„Éà„Éã„É•„Éº„Çπ„ÇíAIÈü≥Â£∞„Åß„ÅäÂ±ä„Åë„Åó„Åæ„ÅôÔºÅ"
        
        return {
            "type": "text",
            "text": message_text
        }
    
    def create_carousel_message(self, episodes: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Ë§áÊï∞„Ç®„Éî„ÇΩ„Éº„ÉâÁî®„ÅÆ„Ç´„É´„Éº„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩúÊàê
        
        Args:
            episodes: „Ç®„Éî„ÇΩ„Éº„Éâ„É™„Çπ„Éà
            
        Returns:
            Dict[str, Any]: Flex Carousel Message
        """
        try:
            bubbles = []
            
            for episode in episodes[:10]:  # ÊúÄÂ§ß10‰ª∂
                episode_info = episode.get('episode_info', {})
                articles = episode.get('articles', [])
                audio_url = episode.get('audio_url')
                
                # ÂêÑ„Ç®„Éî„ÇΩ„Éº„ÉâÁî®„ÅÆbubble„Çí‰ΩúÊàê
                bubble = self.create_podcast_notification_flex(episode_info, articles, audio_url)
                if bubble.get('contents'):
                    bubbles.append(bubble['contents'])
            
            if not bubbles:
                return self._create_simple_fallback_message({}, [])
            
            return {
                "type": "flex",
                "altText": f"{self.icons['podcast']} „Éû„Éº„Ç±„ÉÉ„Éà„Éã„É•„Éº„Çπ„Éù„ÉÉ„Éâ„Ç≠„É£„Çπ„Éà‰∏ÄË¶ß",
                "contents": {
                    "type": "carousel",
                    "contents": bubbles
                }
            }
            
        except Exception as e:
            self.logger.error(f"„Ç´„É´„Éº„Çª„É´„É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê„Ç®„É©„Éº: {e}")
            return self._create_simple_fallback_message({}, [])